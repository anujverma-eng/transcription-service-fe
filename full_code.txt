Directory Tree:
transcription-frontend/
│   ├── tsconfig.node.json
│   ├── index.html
│   ├── .DS_Store
│   ├── tsconfig.app.json
│   ├── README.md
│   ├── .gitignore
│   ├── components.json
│   ├── tsconfig.json
│   ├── eslint.config.js
│   ├── vite.config.ts
│   ├── node_modules/ [EXCLUDED]
│   ├── public/
│   │   ├── waveform.svg
│   │   ├── vite.svg
│   ├── .qodo/
│   ├── .git/ [EXCLUDED]
│   ├── src/
│   │   ├── App.tsx
│   │   ├── main.tsx
│   │   ├── App.css
│   │   ├── index.css
│   │   ├── vite-env.d.ts
│   │   ├── features/
│   │   │   ├── transcription/
│   │   │   │   ├── transcriptionSlice.ts
│   │   │   │   ├── transcriptionApi.ts
│   │   │   ├── auth/
│   │   │   │   ├── authTypes.ts
│   │   │   │   ├── authSlice.ts
│   │   │   ├── public/
│   │   │   │   ├── publicSlice.ts
│   │   ├── components/
│   │   │   ├── PasswordInput.tsx
│   │   │   ├── ui/
│   │   │   │   ├── tabs.tsx
│   │   │   │   ├── card.tsx
│   │   │   │   ├── sheet.tsx
│   │   │   │   ├── label.tsx
│   │   │   │   ├── badge.tsx
│   │   │   │   ├── separator.tsx
│   │   │   │   ├── button.tsx
│   │   │   │   ├── dropdown-menu.tsx
│   │   │   │   ├── input.tsx
│   │   │   │   ├── skeleton.tsx
│   │   │   │   ├── carousel.tsx
│   │   │   ├── layout/
│   │   │   │   ├── SiteFooter.tsx
│   │   │   │   ├── SiteHeader.tsx
│   │   ├── lib/
│   │   │   ├── utils.ts
│   │   │   ├── countries.ts
│   │   ├── api/
│   │   │   ├── authApi.ts
│   │   │   ├── apiClient.ts
│   │   │   ├── publicApi.ts
│   │   ├── assets/
│   │   │   ├── react.svg
│   │   ├── pages/
│   │   │   ├── GoogleCallbackPage.tsx
│   │   │   ├── Dashboard.tsx
│   │   │   ├── ResetPasswordPage.tsx
│   │   │   ├── AuthPage.tsx
│   │   │   ├── AdminPanel.tsx
│   │   │   ├── UpgradePage.tsx
│   │   │   ├── PlansPage.tsx
│   │   │   ├── HomePage.tsx
│   │   ├── routes/
│   │   │   ├── ProtectedRoute.tsx
│   │   │   ├── RoleRoute.tsx
│   │   ├── store/
│   │   │   ├── hooks.ts
│   │   │   ├── store.ts




# ======================
# File: tsconfig.node.json
# ======================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}


# ======================
# File: index.html
# ======================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


# ======================
# File: tsconfig.app.json
# ======================

{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}


# ======================
# File: README.md
# ======================

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```


# ======================
# File: components.json
# ======================

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/index.css",
    "baseColor": "gray",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

# ======================
# File: tsconfig.json
# ======================

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}


# ======================
# File: eslint.config.js
# ======================

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)


# ======================
# File: vite.config.ts
# ======================

import path from "path"
import tailwindcss from "@tailwindcss/vite"
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})


# ======================
# File: src/App.tsx
# ======================

// src/App.tsx
import SiteFooter from "@/components/layout/SiteFooter"
import SiteHeader from "@/components/layout/SiteHeader"
import { useEffect } from "react"
import { Route, Routes } from "react-router-dom"

import { getProfile } from "@/features/auth/authSlice"
import AdminPanel from "@/pages/AdminPanel"
import Dashboard from "@/pages/Dashboard"
import HomePage from "@/pages/HomePage"
import UpgradePage from "@/pages/UpgradePage"
import { useAppDispatch, useAppSelector } from "@/store/hooks"
import AuthPage from "./pages/AuthPage"
import GoogleCallbackPage from "./pages/GoogleCallbackPage"
import ResetPasswordPage from "./pages/ResetPasswordPage"
import ProtectedRoute from "./routes/ProtectedRoute"
import RoleRoute from "./routes/RoleRoute"
import PlansPage from "./pages/PlansPage"

export default function App() {
  const dispatch = useAppDispatch()
  const auth = useAppSelector((state) => state.auth)

  // do a "check if user is still logged in" once
  useEffect(() => {
    // only call getProfile if user is null => so we don’t spam the endpoint 
    // or if you always want to check, that’s also fine
    if (!auth.user) {
      dispatch(getProfile())
    }
  }, [auth.user, dispatch])

  return (
    <div className="flex flex-col min-h-screen">
      <SiteHeader />
      <div className="flex-grow">
        <Routes>
          <Route path="/" element={<HomePage />} />

          <Route path="/auth" element={<AuthPage />} />
          <Route path="/auth/google/callback" element={<GoogleCallbackPage />} />
          <Route path="/reset-password" element={<ResetPasswordPage />} />
          <Route path="/upgrade" element={<UpgradePage />} />
          <Route path="/plans" element={<PlansPage />} />


          <Route 
            path="/dashboard" 
            element={
              <ProtectedRoute>
                <Dashboard />
              </ProtectedRoute>
            }
          />
          <Route
            path="/admin"
            element={
              <RoleRoute requiredRole="admin">
                <AdminPanel />
              </RoleRoute>
            }
          />
          <Route path="*" element={<div className="p-4">404 Not Found</div>} />
        </Routes>
      </div>
      <SiteFooter />
    </div>
  )
}


# ======================
# File: src/main.tsx
# ======================

// src/main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import { Provider } from 'react-redux'
import { BrowserRouter } from 'react-router-dom'
import { store } from './store/store'
import App from './App'
import './index.css'

// Sonner toast
import { Toaster } from 'sonner'

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <Provider store={store}>
      <BrowserRouter>
        <App />
        <Toaster position="top-right" />
      </BrowserRouter>
    </Provider>
  </React.StrictMode>,
)


# ======================
# File: src/App.css
# ======================

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


# ======================
# File: src/index.css
# ======================

@import "tailwindcss";

@plugin "tailwindcss-animate";

@custom-variant dark (&:is(.dark *));
/* 
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  --background: oklch(1 0 0);
  --foreground: oklch(0.13 0.028 261.692);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.13 0.028 261.692);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.13 0.028 261.692);
  --primary: oklch(0.21 0.034 264.665);
  --primary-foreground: oklch(0.985 0.002 247.839);
  --secondary: oklch(0.967 0.003 264.542);
  --secondary-foreground: oklch(0.21 0.034 264.665);
  --muted: oklch(0.967 0.003 264.542);
  --muted-foreground: oklch(0.551 0.027 264.364);
  --accent: oklch(0.967 0.003 264.542);
  --accent-foreground: oklch(0.21 0.034 264.665);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.928 0.006 264.531);
  --input: oklch(0.928 0.006 264.531);
  --ring: oklch(0.707 0.022 261.325);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0.002 247.839);
  --sidebar-foreground: oklch(0.13 0.028 261.692);
  --sidebar-primary: oklch(0.21 0.034 264.665);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.967 0.003 264.542);
  --sidebar-accent-foreground: oklch(0.21 0.034 264.665);
  --sidebar-border: oklch(0.928 0.006 264.531);
  --sidebar-ring: oklch(0.707 0.022 261.325);
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

.dark {
  --background: oklch(0.13 0.028 261.692);
  --foreground: oklch(0.985 0.002 247.839);
  --card: oklch(0.13 0.028 261.692);
  --card-foreground: oklch(0.985 0.002 247.839);
  --popover: oklch(0.13 0.028 261.692);
  --popover-foreground: oklch(0.985 0.002 247.839);
  --primary: oklch(0.985 0.002 247.839);
  --primary-foreground: oklch(0.21 0.034 264.665);
  --secondary: oklch(0.278 0.033 256.848);
  --secondary-foreground: oklch(0.985 0.002 247.839);
  --muted: oklch(0.278 0.033 256.848);
  --muted-foreground: oklch(0.707 0.022 261.325);
  --accent: oklch(0.278 0.033 256.848);
  --accent-foreground: oklch(0.985 0.002 247.839);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.278 0.033 256.848);
  --input: oklch(0.278 0.033 256.848);
  --ring: oklch(0.446 0.03 256.802);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.034 264.665);
  --sidebar-foreground: oklch(0.985 0.002 247.839);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.278 0.033 256.848);
  --sidebar-accent-foreground: oklch(0.985 0.002 247.839);
  --sidebar-border: oklch(0.278 0.033 256.848);
  --sidebar-ring: oklch(0.446 0.03 256.802);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
} */


# ======================
# File: src/vite-env.d.ts
# ======================

/// <reference types="vite/client" />


# ======================
# File: src/features/transcription/transcriptionSlice.ts
# ======================

// src/features/transcription/transcriptionSlice.ts

import type { RootState } from "@/store/store";
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

import {
  deleteJobApi,
  fetchJobsApi,
  fetchUsageApi,
  getJobDetailApi,
  presignAudioApi,
  queueTranscriptionJobApi,
  TranscriptionJob,
  Usage
} from "./transcriptionApi";

interface TranscriptionState {
  usage: Usage | null;
  jobs: TranscriptionJob[];
  selectedJob: TranscriptionJob | null;
  status: "idle" | "loading" | "succeeded" | "failed";
  error: string | null;
}

const initialState: TranscriptionState = {
  usage: null,
  jobs: [],
  selectedJob: null,
  status: "idle",
  error: null
};

// Thunks

// 1) fetchUsage => GET /transcription/usage
export const fetchUsage = createAsyncThunk("transcription/fetchUsage", async (_, thunkAPI) => {
});

// 2) fetchJobs => GET /transcription/search?query=...
export const fetchJobs = createAsyncThunk("transcription/fetchJobs", async (searchQuery?: string, thunkAPI) => {
});

// 3) getJobDetail => GET /transcription/job/:jobId
export const getJobDetail = createAsyncThunk(
  "transcription/getJobDetail",
  async (jobId: string, thunkAPI) => {

  }
);

// 4) presign => POST /transcription/presign
export const presignAudio = createAsyncThunk(
  "transcription/presignAudio",
  async (
    { fileName, duration, mimeType }: { fileName: string; duration: number; mimeType: string },
    thunkAPI
  ) => {
  }
);

// 5) queue => POST /transcription/queue-job
export const queueTranscriptionJob = createAsyncThunk(
  "transcription/queueTranscriptionJob",
  async ({ s3Key, duration, fileName }: { s3Key: string; duration: number; fileName: string }, thunkAPI) => {
  }
);

// 6) DELETE
export const deleteJob = createAsyncThunk("transcription/deleteJob", async (jobId: string, thunkAPI) => {
});

const transcriptionSlice = createSlice({
  name: "transcription",
  initialState,
  reducers: {
    setSelectedJob(state, action: PayloadAction<TranscriptionJob | null>) {
      state.selectedJob = action.payload;
    }
  },
  extraReducers: (builder) => {
    // fetchUsage
    builder
      .addCase(fetchUsage.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchUsage.fulfilled, (state, action: PayloadAction<Usage>) => {
        state.status = "succeeded";
        state.usage = action.payload;
      })
      .addCase(fetchUsage.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload as string;
      });

    // fetchJobs
    builder
      .addCase(fetchJobs.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchJobs.fulfilled, (state, action: PayloadAction<TranscriptionJob[]>) => {
        state.status = "succeeded";
        state.jobs = action.payload;
      })
      .addCase(fetchJobs.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload as string;
      });

    // getJobDetail
    builder
      .addCase(getJobDetail.fulfilled, (state, action) => {
        // action.payload => { jobId, status, audioFileLink, transcriptionFileLink }
        const { jobId, ...rest } = action.payload as any;
        const idx = state.jobs.findIndex((j) => j._id === jobId);
        if (idx >= 0) {
          const updatedJob = { ...state.jobs[idx], ...rest };
          state.jobs[idx] = updatedJob;
          if (state.selectedJob && state.selectedJob._id === jobId) {
            state.selectedJob = updatedJob;
          }
        }
      })
      .addCase(getJobDetail.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload as string;
      });

    // presignAudio
    builder
      .addCase(presignAudio.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload as string;
      });

    // queueTranscriptionJob
    builder
      .addCase(queueTranscriptionJob.fulfilled, (state, action) => {
        const { newJob } = action.payload;
        // Insert new job at the top
        state.jobs.unshift(newJob);
      })
      .addCase(queueTranscriptionJob.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload as string;
      });

    // deleteJob
    builder
      .addCase(deleteJob.fulfilled, (state, action) => {
        const { jobId } = action.payload;
        state.jobs = state.jobs.filter((j) => j._id !== jobId);
      })
      .addCase(deleteJob.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload as string;
      });
  },
});

export const { setSelectedJob } = transcriptionSlice.actions;
export default transcriptionSlice.reducer;

// typed selectors
export const selectTranscriptionUsage = (state: RootState) => state.transcription.usage;
export const selectTranscriptionJobs = (state: RootState) => state.transcription.jobs;
export const selectTranscriptionSelected = (state: RootState) => state.transcription.selectedJob;
export const selectTranscriptionStatus = (state: RootState) => state.transcription.status;
export const selectTranscriptionError = (state: RootState) => state.transcription.error;


# ======================
# File: src/features/transcription/transcriptionApi.ts
# ======================

// src/api/transcriptionApi.ts

import { apiClient } from "@/api/apiClient";

// Types for usage, job, responses
export interface Usage {
  totalLimit: number;
  totalUsedMinutes: number;
  remainingMinutes: number;
}

export enum TranscriptionStatus {
  QUEUED = "QUEUED",
  PROCESSING = "PROCESSING",
  COMPLETED = "COMPLETED",
  FAILED = "FAILED",
}

export interface TranscriptionJob {
  _id: string;
  fileName?: string;
  durationInSeconds: number;
  durationText?: string;
  usageMinutes: number;
  status: TranscriptionStatus;
  createdAt?: string;
  audioFileKey?: string;
  audioFileLink?: string | null;
  transcriptionFileLink?: string | null;
}

// 1) GET usage => /api/v1/transcription/usage
export async function fetchUsageApi(): Promise<Usage> {
  const res = await apiClient.get("/transcription/usage");
  return res.data; // e.g. { totalLimit, totalUsedMinutes, remainingMinutes }
}

// 2) GET /transcription/search?query=...
export async function fetchJobsApi(searchQuery?: string): Promise<TranscriptionJob[]> {
  let url = "/transcription/search";
  if (searchQuery) {
    url += `?query=${encodeURIComponent(searchQuery)}`;
  }
  const res = await apiClient.get(url);
  // assume res.data is an array of jobs
  return res.data;
}

// 3) GET /transcription/job/:jobId
export async function getJobDetailApi(jobId: string): Promise<{ jobId: string; status: string; audioFileLink?: string; transcriptionFileLink?: string; }> {
  const res = await apiClient.get(`/transcription/job/${jobId}`);
  // e.g. { status, audioFileLink, transcriptionFileLink }
  // We'll return { jobId, ...res.data }
  return { jobId, ...res.data };
}

// 4) POST /transcription/presign => { presignedUrl, s3Key }
export interface PresignResponse {
  presignedUrl: string;
  s3Key: string;
}
export async function presignAudioApi(fileName: string, duration: number, mimeType: string): Promise<PresignResponse> {
  const body = { fileName, duration, mimeType };
  const res = await apiClient.post("/transcription/presign", body);
  return res.data; 
}

// 5) POST /transcription/queue-job => { newJob, ... }
export interface QueueJobParams {
  s3Key: string;
  duration: number;
  fileName: string;
}
export async function queueTranscriptionJobApi(params: QueueJobParams): Promise<{
  message: string;
  newJob: TranscriptionJob;
  priority: number;
  submissionIndex: number;
  jobId: string;
}> {
  const res = await apiClient.post("/transcription/queue-job", {
    audioFileKey: params.s3Key,
    duration: params.duration,
    fileName: params.fileName,
  });
  return res.data; 
}

// 6) (Optional) DELETE /transcription/:jobId
export async function deleteJobApi(jobId: string): Promise<{ jobId: string }> {
  // If/when you implement a delete route:
  // const res = await apiClient.delete(`/transcription/${jobId}`);
  // return res.data; 
  return { jobId }; // stub
}


# ======================
# File: src/features/auth/authTypes.ts
# ======================

// src/features/auth/authTypes.ts
export interface SignUpDto {
  email: string;
  password: string;
  name?: string;
  organization?: string;
  phoneNumber?: string;
  country?: string;
}
export interface LoginDto {
  email: string;
  password: string;
}
export interface ForgotPasswordDto {
  email: string;
}
export interface ResetPasswordDto {
  token: string;
  newPassword: string;
}

export interface AuthResponse {
  message: string;
  user?: {
    id?: string;
    email: string;
    role?: string;
    name?: string;
    subscriptionPlan?: string;
  };
}

export interface GenericResponse {
  message: string;
}

export interface ProfileResponse {
  user: {
    _id: string;
    email: string;
    name: string;
    role: string;
  };
  subscription: {
    _id: string;
    isPaid: boolean;
    totalLimit: number;
    endDate: string | null;
    // ...
  };
}


# ======================
# File: src/features/auth/authSlice.ts
# ======================

// src/features/auth/authSlice.ts
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import * as authApi from '@/api/authApi';
import {
  SignUpDto,
  LoginDto,
  ForgotPasswordDto,
  ResetPasswordDto,
} from './authTypes';

interface User {
  id?: string;
  email?: string;
  role?: string;
  name?: string;
  subscriptionPlan?: string;
  totalLimit?: number;
}

interface AuthState {
  user: User | null;
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: AuthState = {
  user: null,
  status: 'idle',
  error: null,
};

// after user logs in with google, the server sets cookies => we call getProfile
export const completeGoogleAuth = createAsyncThunk(
  'auth/completeGoogleAuth',
  async (_, thunkAPI) => {
    try {
      const profile = await authApi.getProfile();
      return profile;
    } catch (err: any) {
      return thunkAPI.rejectWithValue(
        err.response?.data?.message?.message || err.message || 'Google Auth failed'
      );
    }
  }
);

// signUp => then getProfile
export const signUpUser = createAsyncThunk('auth/signUpUser', async (dto: SignUpDto, thunkAPI) => {
});

// login => then getProfile
export const loginUser = createAsyncThunk('auth/loginUser', async (dto: LoginDto, thunkAPI) => {
});

// forgot
export const forgotPassword = createAsyncThunk('auth/forgotPassword', async (dto: ForgotPasswordDto, thunkAPI) => {
});

// reset => then getProfile
export const resetPassword = createAsyncThunk('auth/resetPassword', async (dto: ResetPasswordDto, thunkAPI) => {
});

// logout
export const logoutUser = createAsyncThunk('auth/logoutUser', async (_, thunkAPI) => {
});

// optional getProfile if you want a manual re-check
export const getProfile = createAsyncThunk('auth/getProfile', async (_, thunkAPI) => {
});

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    setUser(state, action: PayloadAction<User | null>) {
      state.user = action.payload;
    },
  },
  extraReducers: (builder) => {
    // signUpUser
    builder
      .addCase(signUpUser.pending, (state) => {
        state.status = 'loading';
        state.error = null;
      })
      .addCase(signUpUser.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.error = null;
        const { user, subscription } = action.payload;
        state.user = {
          id: user._id,
          email: user.email,
          name: user.name,
          role: user.role,
          subscriptionPlan: subscription.isPaid ? 'paid' : 'free',
          totalLimit: subscription.totalLimit,
        };
      })
      .addCase(signUpUser.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload as string;
      })

      // loginUser
      .addCase(loginUser.pending, (state) => {
        state.status = 'loading';
        state.error = null;
      })
      .addCase(loginUser.fulfilled, (state, action) => {
      
      })
      .addCase(loginUser.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload as string;
      })

      // forgotPassword
      .addCase(forgotPassword.pending, (state) => {
        state.status = 'loading';
        state.error = null;
      })
      .addCase(forgotPassword.fulfilled, (state) => {
        state.status = 'succeeded';
        state.error = null;
      })
      .addCase(forgotPassword.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload as string;
      })

      // resetPassword
      .addCase(resetPassword.pending, (state) => {
        state.status = 'loading';
        state.error = null;
      })
      .addCase(resetPassword.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.error = null;
        const { user, subscription } = action.payload;
        state.user = {
          id: user._id,
          email: user.email,
          name: user.name,
          role: user.role,
          subscriptionPlan: subscription.isPaid ? 'paid' : 'free',
          totalLimit: subscription.totalLimit,
        };
      })
      .addCase(resetPassword.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload as string;
      })

      // logout
      .addCase(logoutUser.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(logoutUser.fulfilled, (state) => {
        state.status = 'idle';
        state.error = null;
        state.user = null;
      })
      .addCase(logoutUser.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload as string;
      })

      // completeGoogleAuth
      .addCase(completeGoogleAuth.pending, (state) => {
        state.status = 'loading';
        state.error = null;
      })
      .addCase(completeGoogleAuth.fulfilled, (state, action) => {
        
        };
      })
      .addCase(completeGoogleAuth.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload as string;
      })

      // getProfile
      .addCase(getProfile.pending, (state) => {
        state.status = 'loading';
        state.error = null;
      })
      .addCase(getProfile.fulfilled, (state, action) => {
       
        };
      })
      .addCase(getProfile.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload as string;
      });
  },
});

export const { setUser } = authSlice.actions;
export default authSlice.reducer;


# ======================
# File: src/features/public/publicSlice.ts
# ======================

// src/features/public/publicSlice.ts
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import * as publicApi from "@/api/publicApi";

export interface PublicState {
  plans: publicApi.Plan[];
  feedback: publicApi.Feedback[];
  status: "idle" | "loading" | "succeeded" | "failed";
  error: string | null;
}

const initialState: PublicState = {
  plans: [],
  feedback: [],
  status: "idle",
  error: null,
};

// fetch public plans
export const fetchPublicPlans = createAsyncThunk(
  "public/fetchPublicPlans",
  async (_, thunkAPI) => {
    try {
      const plans = await publicApi.getPublicPlans();
      return plans;
    } catch (err: any) {
      return thunkAPI.rejectWithValue(err.response?.data?.message?.message || err.message || "Failed to get plans");
    }
  }
);

// fetch public feedback
export const fetchPublicFeedback = createAsyncThunk(
  "public/fetchPublicFeedback",
  async (_, thunkAPI) => {
      const feedback = await publicApi.getPublicFeedback();
  }
);

const publicSlice = createSlice({
  name: "public",
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      // fetchPublicPlans
      .addCase(fetchPublicPlans.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchPublicPlans.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.plans = action.payload;
      })
      .addCase(fetchPublicPlans.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload as string;
      })

      // fetchPublicFeedback
      .addCase(fetchPublicFeedback.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchPublicFeedback.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.feedback = action.payload;
      })
      .addCase(fetchPublicFeedback.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload as string;
      });
  },
});

export default publicSlice.reducer;


# ======================
# File: src/components/PasswordInput.tsx
# ======================

// src/components/PasswordInput.tsx
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Eye, EyeOff } from 'lucide-react'
import { useState, type InputHTMLAttributes } from 'react'

export function PasswordInput({ ...props }: InputHTMLAttributes<HTMLInputElement>) {
  const [showPassword, setShowPassword] = useState(false)

  return (
    <div className="relative">
      <Input
        type={showPassword ? 'text' : 'password'}
        {...props}
      />
      <Button
        type="button"
        variant="ghost"
        size="sm"
        className="absolute right-2 top-1/2 -translate-y-1/2 h-8 px-2"
        onClick={() => setShowPassword(!showPassword)}
      >
        {showPassword ? (
          <EyeOff className="h-4 w-4" />
        ) : (
          <Eye className="h-4 w-4" />
        )}
      </Button>
    </div>
  )
}

# ======================
# File: src/components/ui/tabs.tsx
# ======================

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-1",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring inline-flex items-center justify-center gap-1.5 rounded-md px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }


# ======================
# File: src/components/ui/card.tsx
# ======================

import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn("flex flex-col gap-1.5 px-6", className)}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6", className)}
      {...props}
    />
  )
}

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


# ======================
# File: src/components/ui/sheet.tsx
# ======================

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


# ======================
# File: src/components/ui/label.tsx
# ======================

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }


# ======================
# File: src/components/ui/badge.tsx
# ======================

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }


# ======================
# File: src/components/ui/separator.tsx
# ======================

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }


# ======================
# File: src/components/ui/button.tsx
# ======================

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> &
    VariantProps<typeof buttonVariants> & {
      asChild?: boolean
    }
>(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
})
Button.displayName = "Button"

export { Button, buttonVariants }


# ======================
# File: src/components/ui/dropdown-menu.tsx
# ======================

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive-foreground data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/40 data-[variant=destructive]:focus:text-destructive-foreground data-[variant=destructive]:*:[svg]:!text-destructive-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}


# ======================
# File: src/components/ui/input.tsx
# ======================

import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }


# ======================
# File: src/components/ui/skeleton.tsx
# ======================

import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-primary/10 animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }


# ======================
# File: src/components/ui/carousel.tsx
# ======================

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

function Carousel({
  orientation = "horizontal",
  opts,
  setApi,
  plugins,
  className,
  children,
  ...props
}: React.ComponentProps<"div"> & CarouselProps) {
  const [carouselRef, api] = useEmblaCarousel(
    {
      ...opts,
      axis: orientation === "horizontal" ? "x" : "y",
    },
    plugins
  )
  const [canScrollPrev, setCanScrollPrev] = React.useState(false)
  const [canScrollNext, setCanScrollNext] = React.useState(false)

  const onSelect = React.useCallback((api: CarouselApi) => {
    if (!api) return
    setCanScrollPrev(api.canScrollPrev())
    setCanScrollNext(api.canScrollNext())
  }, [])

  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev()
  }, [api])

  const scrollNext = React.useCallback(() => {
    api?.scrollNext()
  }, [api])

  const handleKeyDown = React.useCallback(
    (event: React.KeyboardEvent<HTMLDivElement>) => {
      if (event.key === "ArrowLeft") {
        event.preventDefault()
        scrollPrev()
      } else if (event.key === "ArrowRight") {
        event.preventDefault()
        scrollNext()
      }
    },
    [scrollPrev, scrollNext]
  )

  React.useEffect(() => {
    if (!api || !setApi) return
    setApi(api)
  }, [api, setApi])

  React.useEffect(() => {
    if (!api) return
    onSelect(api)
    api.on("reInit", onSelect)
    api.on("select", onSelect)

    return () => {
      api?.off("select", onSelect)
    }
  }, [api, onSelect])

  return (
    <CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation:
          orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext,
      }}
    >
      <div
        onKeyDownCapture={handleKeyDown}
        className={cn("relative", className)}
        role="region"
        aria-roledescription="carousel"
        data-slot="carousel"
        {...props}
      >
        {children}
      </div>
    </CarouselContext.Provider>
  )
}

function CarouselContent({ className, ...props }: React.ComponentProps<"div">) {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div
      ref={carouselRef}
      className="overflow-hidden"
      data-slot="carousel-content"
    >
      <div
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CarouselItem({ className, ...props }: React.ComponentProps<"div">) {
  const { orientation } = useCarousel()

  return (
    <div
      role="group"
      aria-roledescription="slide"
      data-slot="carousel-item"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
}

function CarouselPrevious({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      data-slot="carousel-previous"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -left-12 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
}

function CarouselNext({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      data-slot="carousel-next"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -right-12 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight />
      <span className="sr-only">Next slide</span>
    </Button>
  )
}

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


# ======================
# File: src/components/layout/SiteFooter.tsx
# ======================

// src/components/layout/SiteFooter.tsx
import React from "react"
import { Link } from "react-router-dom"

export default function SiteFooter() {
  return (
    <footer className="w-full bg-gray-100 dark:bg-gray-800 border-t dark:border-gray-700 mt-auto">
      <div className="container mx-auto px-4 py-6 flex flex-col md:flex-row items-center justify-between">
        <div className="text-gray-600 dark:text-gray-300 text-sm">
          © 2025 TranscriptionSaaS, Inc. All rights reserved.
        </div>
        <div className="flex flex-col md:flex-row items-center md:space-x-4 mt-2 md:mt-0">
          <Link to="/terms" className="text-sm text-gray-500 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 mb-2 md:mb-0">
            Terms
          </Link>
          <Link to="/privacy" className="text-sm text-gray-500 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 mb-2 md:mb-0">
            Privacy
          </Link>
          <Link to="/contact" className="text-sm text-gray-500 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">
            Contact
          </Link>
        </div>
      </div>
    </footer>
  )
}


# ======================
# File: src/components/layout/SiteHeader.tsx
# ======================

// Mobile Navigation Props
interface MobileNavMenuProps {
  isLoggedIn: boolean;
  isAdmin: boolean;
  isPaidPlan: boolean;
  isAuthPage: boolean;
  handleLogout: () => void;
}

import { logoutUser } from "@/features/auth/authSlice";
import { useAppDispatch, useAppSelector } from "@/store/hooks";
import React from "react";
import { Link, useLocation, useNavigate } from "react-router-dom";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Sheet, SheetClose, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import { cn } from "@/lib/utils";
import { Gem, LayoutDashboard, LogOut, Menu, Rocket, Settings, Shield, User } from "lucide-react";

export default function SiteHeader() {
  const auth = useAppSelector((state) => state.auth);
  console.log(auth);
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const location = useLocation();

  const isAuthPage = location.pathname.startsWith("/reset-password") || location.pathname.startsWith("/auth");

  const isLoggedIn = !!auth.user;
  const isAdmin = auth.user?.role === "admin";
  const isPaidPlan = auth.user?.subscriptionPlan === "paid";

  const handleLogout = () => {
    dispatch(logoutUser()).then(() => {
      navigate("/");
    });
  };

  return (
    <header className="sticky top-0 w-full bg-white/80 dark:bg-gray-900/80 backdrop-blur-md z-50 shadow-md">
      <div className="container mx-auto px-4 py-3 flex items-center justify-between">
        {/* Brand Logo */}
        <Link
          to="/"
          className="flex items-center gap-2 text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent"
        >
          <span className="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg p-1.5">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="M12 2v20" />
              <path d="M2 5h20" />
              <path d="M3 12h18" />
            </svg>
          </span>
          AudioLekh
        </Link>

        {/* Desktop Navigation */}
        <nav className="hidden md:flex items-center gap-1">
          {!isLoggedIn && !isAuthPage && (
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                className="text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400"
                onClick={() => navigate("/auth?mode=login")}
              >
                Login
              </Button>
              <Button
                variant="default"
                className="bg-gradient-to-r from-blue-500 to-purple-500 text-white hover:from-blue-600 hover:to-purple-600"
                onClick={() => navigate("/auth?mode=signup")}
              >
                Get Started
                <Rocket className="ml-2 h-4 w-4" />
              </Button>
            </div>
          )}

          {isLoggedIn && (
            <>
              <NavLink to="/dashboard" icon={<LayoutDashboard className="h-4 w-4" />}>
                Dashboard
              </NavLink>

              {!isPaidPlan && (
                <Button
                  asChild
                  variant="ghost"
                  className="bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:from-purple-600 hover:to-pink-600 hover:shadow-lg transition-all"
                >
                  <Link to="/plans">
                    <Gem className="mr-2 h-4 w-4" />
                    Upgrade
                    <span className="ml-2 bg-white/10 px-2 py-1 rounded-full text-xs">PRO</span>
                  </Link>
                </Button>
              )}

              {isAdmin && (
                <NavLink to="/admin" icon={<Shield className="h-4 w-4" />}>
                  Admin
                  <Badge variant="outline" className="ml-2">
                    PRO
                  </Badge>
                </NavLink>
              )}

              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant="ghost"
                    className="rounded-full px-2 space-x-2 hover:bg-gray-100 dark:hover:bg-gray-800 group"
                  >
                    <div className="h-8 w-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center relative">
                      <User className="h-4 w-4 text-white" />
                      <span className="absolute -right-1 -top-1 h-3 w-3 rounded-full bg-green-500 border-2 border-white dark:border-gray-900"></span>
                    </div>
                    <span className="font-medium text-gray-700 dark:text-gray-300">
                      {auth.user?.name || auth.user?.email}
                    </span>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="w-56" align="end">
                  <DropdownMenuLabel className="flex items-center">
                    <User className="mr-2 h-4 w-4" />
                    <div className="flex flex-col">
                      <span className="font-medium">{auth.user?.name}</span>
                      <span className="text-xs text-gray-500">{auth.user?.email}</span>
                    </div>
                  </DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onClick={() => navigate("/dashboard")} className="cursor-pointer">
                    <LayoutDashboard className="mr-2 h-4 w-4" />
                    Dashboard
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => navigate("/settings")} className="cursor-pointer">
                    <Settings className="mr-2 h-4 w-4" />
                    Settings
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem
                    onClick={handleLogout}
                    className="cursor-pointer text-red-600 hover:!bg-red-50 dark:text-red-400"
                  >
                    <LogOut className="mr-2 h-4 w-4" />
                    Logout
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </>
          )}
        </nav>

        {/* Mobile Navigation */}
        <div className="md:hidden">
          <MobileNavMenu
            isLoggedIn={isLoggedIn}
            isAdmin={isAdmin}
            isPaidPlan={isPaidPlan}
            isAuthPage={isAuthPage}
            handleLogout={handleLogout}
          />
        </div>
      </div>
    </header>
  );
}

// Reusable NavLink Component
function NavLink({ to, icon, children }: { to: string; icon?: React.ReactNode; children: React.ReactNode }) {
  const location = useLocation();
  const isActive = location.pathname.startsWith(to);

  return (
    <Link to={to}>
      <Button
        variant="ghost"
        className={cn(
          "text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400 gap-2",
          isActive && "text-blue-600 dark:text-blue-400 font-semibold"
        )}
      >
        {icon}
        {children}
      </Button>
    </Link>
  );
}

// Enhanced Mobile NavMenu
function MobileNavMenu({ isLoggedIn, isAdmin, isPaidPlan, isAuthPage, handleLogout }: MobileNavMenuProps) {
  const navigate = useNavigate();
  const location = useLocation();

  const isActive = (path: string) => location.pathname.startsWith(path);

  return (
    <Sheet>
      <SheetTrigger asChild>
        <Button variant="ghost" className="p-2">
          <Menu className="h-6 w-6" />
        </Button>
      </SheetTrigger>
      <SheetContent
        side="right"
        className="bg-white/95 dark:bg-gray-900/95 backdrop-blur-lg w-[280px] sm:w-[320px] border-l dark:border-gray-800"
      >
        <SheetHeader className="mb-6">
          <div className="flex items-center justify-between">
            <SheetTitle className="text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              AudioLekh
            </SheetTitle>
            {/* <SheetClose>
              <X className="h-6 w-6 text-gray-600 dark:text-gray-400" />
            </SheetClose> */}
          </div>
        </SheetHeader>

        <nav className="flex flex-col gap-1">
          {!isLoggedIn && !isAuthPage && (
            <SheetClose asChild>
              <Button
                variant="default"
                className="bg-gradient-to-r from-blue-500 to-purple-500 text-white hover:from-blue-600 hover:to-purple-600"
                onClick={() => navigate("/auth?mode=signup")}
              >
                Get Started
                <Rocket className="ml-2 h-4 w-1/2" />
              </Button>
            </SheetClose>
          )}

          {isLoggedIn && (
            <>
              <SheetClose asChild>
                <Button
                  variant="ghost"
                  className={cn(
                    "w-full justify-start text-lg py-5",
                    isActive("/dashboard") && "text-blue-600 dark:text-blue-400"
                  )}
                  onClick={() => navigate("/dashboard")}
                >
                  <LayoutDashboard className="mr-3 h-5 w-5" />
                  Dashboard
                </Button>
              </SheetClose>

              {!isPaidPlan && (
                <SheetClose asChild>
                  <Button
                    variant="ghost"
                    className="w-full justify-start text-lg py-5 bg-gradient-to-r from-purple-500/10 to-pink-500/10"
                    onClick={() => navigate("/upgrade")}
                  >
                    <Gem className="mr-3 h-5 w-5" />
                    Upgrade Plan
                    <Badge variant="outline" className="ml-2">
                      PRO
                    </Badge>
                  </Button>
                </SheetClose>
              )}

              {isAdmin && (
                <SheetClose asChild>
                  <Button
                    variant="ghost"
                    className={cn(
                      "w-full justify-start text-lg py-5",
                      isActive("/admin") && "text-blue-600 dark:text-blue-400"
                    )}
                    onClick={() => navigate("/admin")}
                  >
                    <Shield className="mr-3 h-5 w-5" />
                    Admin Panel
                  </Button>
                </SheetClose>
              )}

              <div className="mt-4 pt-4 border-t dark:border-gray-800">
                <SheetClose asChild>
                  <Button
                    variant="ghost"
                    className="w-full justify-start text-lg py-5 text-red-600 hover:text-red-700 dark:text-red-400"
                    onClick={handleLogout}
                  >
                    <LogOut className="mr-3 h-5 w-5" />
                    Logout
                  </Button>
                </SheetClose>
              </div>
            </>
          )}
        </nav>
      </SheetContent>
    </Sheet>
  );
}


# ======================
# File: src/lib/utils.ts
# ======================

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


# ======================
# File: src/lib/countries.ts
# ======================

// src/lib/countries.ts
export const countryList = [
  { code: 'IN', name: 'India', dial_code: '+91' },
  { code: 'US', name: 'United States', dial_code: '+1' },
  { code: 'GB', name: 'United Kingdom', dial_code: '+44' },
  { code: 'CA', name: 'Canada', dial_code: '+1' },
  { code: 'AU', name: 'Australia', dial_code: '+61' },
  { code: 'NZ', name: 'New Zealand', dial_code: '+64' },
  { code: 'ZA', name: 'South Africa', dial_code: '+27' },
  { code: 'IN', name: 'India', dial_code: '+91' },
  { code: 'BR', name: 'Brazil', dial_code: '+55' },
  { code: 'AR', name: 'Argentina', dial_code: '+54' },
  { code: 'MX', name: 'Mexico', dial_code: '+52' },
  { code: 'CO', name: 'Colombia', dial_code: '+57' },
  { code: 'PE', name: 'Peru', dial_code: '+51' },
  { code: 'CL', name: 'Chile', dial_code: '+56' },
  { code: 'EC', name: 'Ecuador', dial_code: '+593' },
]

# ======================
# File: src/api/authApi.ts
# ======================

// src/api/authApi.ts
import { apiClient } from './apiClient';
import {
  SignUpDto,
  LoginDto,
  AuthResponse,
  GenericResponse,
  ForgotPasswordDto,
  ResetPasswordDto,
  ProfileResponse,
} from '@/features/auth/authTypes';

export async function signUp(data: SignUpDto): Promise<AuthResponse> {
  const res = await apiClient.post('/auth/sign-up', data);
  return res.data; // server might return { message, user? }
}

export async function login(data: LoginDto): Promise<AuthResponse> {
  const res = await apiClient.post('/auth/login', data);
  return res.data;
}

export async function logout(): Promise<GenericResponse> {
    const res = await apiClient.post('/auth/logout');
    return res.data;
}

export async function forgotPassword(data: ForgotPasswordDto): Promise<GenericResponse> {
  const res = await apiClient.post('/auth/forgot-password', data);
  return res.data;
}

export async function resetPassword(data: ResetPasswordDto): Promise<AuthResponse> {
  const res = await apiClient.post('/auth/reset-password', data);
  return res.data;
}

export async function getProfile(): Promise<ProfileResponse> {
  const res = await apiClient.get('/auth/profile');
  const top = res.data;
  const payload = top.data;
  return {
    user: payload.user,
    subscription: payload.subscription,
  };
}


# ======================
# File: src/api/apiClient.ts
# ======================

// src/api/apiClient.ts
import axios, { AxiosRequestConfig, AxiosError, InternalAxiosRequestConfig } from 'axios';

const baseURL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3000/api/v1';

export const apiClient = axios.create({
  baseURL,
  withCredentials: true, // so NestJS sets httpOnly cookies
  headers: {
    'Content-Type': 'application/json',
  },
});

let isRefreshing = false;
let failedQueue: {
  resolve: (value?: unknown) => void;
  reject: (reason?: any) => void;
  config: AxiosRequestConfig;
}[] = [];

function processQueue(error: any, success: boolean) {
  failedQueue.forEach((prom) => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(prom.config);
    }
  });
  failedQueue = [];
}

apiClient.interceptors.response.use(
  (response) => response,
  async (error: AxiosError) => {
    const originalRequest = error.config as InternalAxiosRequestConfig & { _retry?: boolean };

    // Skip token refresh for auth endpoints
    const isAuthEndpoint = originalRequest?.url?.includes('/auth/');
    
    if (error.response?.status === 401 && !originalRequest?._retry && !isAuthEndpoint) {
      if (isRefreshing) {
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject, config: originalRequest });
        })
          .then((reqConfig) => apiClient(reqConfig))
          .catch((err) => Promise.reject(err));
      }

      originalRequest._retry = true;
      isRefreshing = true;

      try {
        // call /auth/refresh
        await apiClient.post('/auth/refresh');

        isRefreshing = false;
        processQueue(null, true);

        // re-run the original request
        return apiClient(originalRequest);
      } catch (refreshErr) {
        isRefreshing = false;
        processQueue(refreshErr, false);
        // We might dispatch a forced logout or so
        return Promise.reject(refreshErr);
      }
    }

    return Promise.reject(error);
  }
);


# ======================
# File: src/api/publicApi.ts
# ======================

// src/api/publicApi.ts

import { apiClient } from "./apiClient";

export interface Plan {
  _id: string;
  name: string;
  description?: string;
  totalLimit: number;
  price: number;
  currency: string;
  isActive: boolean;
  isPaid: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface Feedback {
  userName: string;
  _id: string;
  userId: string;
  rating: number;
  review: string;
  adminSelected: boolean;
  isDeleted: boolean;
  createdAt?: string;
  updatedAt?: string;
}

// fetch all plans
export async function getPublicPlans(): Promise<Plan[]> {
  const res = await apiClient.get("/admin/plans/get/plans");
  return res.data?.data || res.data;
}

// fetch public feedback
export async function getPublicFeedback(): Promise<Feedback[]> {
  const res = await apiClient.get("/feedback/public");
  return res.data?.data || res.data; 
}


# ======================
# File: src/pages/GoogleCallbackPage.tsx
# ======================

// src/pages/GoogleCallbackPage.tsx
import React, { useEffect } from 'react'
import { useAppDispatch, useAppSelector } from '@/store/hooks'
import { completeGoogleAuth } from '@/features/auth/authSlice'
import { useNavigate } from 'react-router-dom'
import { toast } from 'sonner'

export default function GoogleCallbackPage() {
  const dispatch = useAppDispatch()
  const navigate = useNavigate()
  const auth = useAppSelector((state) => state.auth)

  useEffect(() => {
    // if user is already logged in => skip
    if (auth.user) {
      navigate('/dashboard', { replace: true })
      return
    }

    // call the thunk
    dispatch(completeGoogleAuth()).then((res: any) => {
      if (completeGoogleAuth.rejected.match(res)) {
        toast.error("Google Auth failed: " + res.payload)
        navigate("/auth")
      } else {
        toast.success("Logged in successfully!", { position: "bottom-right" })
        navigate("/dashboard")
      }
    })
  }, [auth.user, dispatch, navigate])

  return (
    <div className="flex flex-col items-center justify-center h-screen">
      <p>Completing Google authentication...</p>
    </div>
  )
}


# ======================
# File: src/pages/Dashboard.tsx
# ======================

// src/pages/Dashboard.tsx
import React, { useEffect, useState, useRef } from "react";
import { useAppDispatch, useAppSelector } from "@/store/hooks";
import { fetchUsage, fetchJobs, presignAudio, queueTranscriptionJob, setSelectedJob, deleteJob } from "@/features/transcription/transcriptionSlice";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";

export default function Dashboard() {
  const dispatch = useAppDispatch();
  const usage = useAppSelector((state) => state.transcription.usage);
  const jobs = useAppSelector((state) => state.transcription.jobs);

  const [file, setFile] = useState<File | null>(null);
  const [searchQuery, setSearchQuery] = useState("");

  // on mount => fetch usage, fetch jobs
  useEffect(() => {
    dispatch(fetchUsage());
    dispatch(fetchJobs(undefined)); // initial listing
  }, [dispatch]);

  const handleSearch = () => {
    dispatch(fetchJobs(searchQuery));
  };

  // measure file duration
  async function measureAudioDuration(audioFile: File): Promise<number> {
    return new Promise((resolve, reject) => {
      const audio = document.createElement("audio");
      audio.preload = "metadata";
      audio.onloadedmetadata = () => {
        if (audio.duration) {
          resolve(Math.floor(audio.duration));
        } else {
          reject("Cannot read duration");
        }
      };
      audio.onerror = () => reject("Audio error");
      audio.src = URL.createObjectURL(audioFile);
    });
  }

  const handleUpload = async () => {
    if (!file) {
      toast.error("No file selected");
      return;
    }

    // measure duration in seconds
    let durationSeconds = 0;
    try {
      durationSeconds = await measureAudioDuration(file);
      if (durationSeconds < 60) {
        toast.error("Audio must be at least 60 seconds");
        return;
      }
    } catch (err) {
      toast.error("Could not measure audio duration");
      return;
    }

    try {
      // 1) call presign => pass { fileName, duration, mimeType: file.type }
      const fileName = file.name;
      const mimeType = file.type;
      const resPresign = await dispatch(presignAudio({ fileName, duration: durationSeconds, mimeType })).unwrap();
      const { presignedUrl, s3Key } = resPresign;

      // 2) do PUT to presignedUrl with the file
      await fetch(presignedUrl, {
        method: "PUT",
        body: file,
        headers: {
          "Content-Type": mimeType
        }
      });

      // 3) queue job => pass { s3Key, duration, fileName }
      const resQueue = await dispatch(queueTranscriptionJob({
        s3Key,
        duration: durationSeconds,
        fileName
      })).unwrap();

      toast.success("File uploaded & job queued");
      console.log(resQueue);
      // optional => refresh usage
      dispatch(fetchUsage());
    } catch (err: any) {
      toast.error("Upload or queue failed: " + err);
    }
  };

  const handleDelete = async (jobId: string) => {
    // if your backend has a DELETE route
    // currently the slice is stub
    await dispatch(deleteJob(jobId));
    toast.success("Transcription deleted");
  };

  const handleOpenPreview = (job: any) => {
    dispatch(setSelectedJob(job));
  };

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">Dashboard</h1>

      <div className="mb-4">
        {usage ? (
          <p>Daily Limit: {usage.totalLimit} min, Used: {usage.totalUsedMinutes} min, Remaining: {usage.remainingMinutes} min</p>
        ) : (
          <p>Loading usage...</p>
        )}
      </div>

      <div className="mb-4 flex space-x-2">
        <input type="file" accept="audio/*" onChange={(e) => setFile(e.target.files?.[0] || null)} />
        <Button onClick={handleUpload}>Upload Audio</Button>
      </div>

      <div className="mb-4 flex space-x-2">
        <input
          type="text"
          className="border p-2"
          placeholder="Search transcriptions"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        <Button onClick={handleSearch}>Search</Button>
      </div>

      <table className="w-full border">
        <thead>
          <tr className="border-b">
            <th className="p-2 text-left">FileName</th>
            <th className="p-2 text-left">Duration (sec)</th>
            <th className="p-2 text-left">Status</th>
            <th className="p-2 text-left">Actions</th>
          </tr>
        </thead>
        <tbody>
          {jobs.map((job) => (
            <tr key={job._id} className="border-b">
              <td className="p-2">{job.fileName ?? "Untitled"}</td>
              <td className="p-2">{job.durationInSeconds}</td>
              <td className="p-2">{job.status}</td>
              <td className="p-2 space-x-2">
                <Button variant="outline" onClick={() => handleOpenPreview(job)}>
                  Preview
                </Button>
                <Button variant="outline" onClick={() => handleDelete(job._id)}>
                  Delete
                </Button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <TranscriptionPreviewModal />
    </div>
  );
}

function TranscriptionPreviewModal() {
  const selectedJob = useAppSelector((state) => state.transcription.selectedJob);
  const dispatch = useAppDispatch();

  if (!selectedJob) return null;

  // if job status is COMPLETED => we can show audio link or transcript link
  // if in progress => show "in progress"

  const handleClose = () => {
    dispatch(setSelectedJob(null));
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
      <div className="bg-white p-4 w-full max-w-md">
        <h2 className="text-xl font-bold mb-2">Transcription Preview</h2>
        {selectedJob.status === "COMPLETED" ? (
          <div>
            <p>Transcript: <a href="#">Download text</a></p>
            { /* Possibly fetch or show the text inline, or do getJobDetail to see if there's transcriptionFileLink */}
            <audio controls src="#" className="mt-2">
              { /* We might do an extra call to getJobDetail to get audioFileLink if not stored in the job object */}
            </audio>
          </div>
        ) : selectedJob.status === "FAILED" ? (
          <p className="text-red-500">Transcription failed. No preview available.</p>
        ) : (
          <p>Transcription is in progress: status {selectedJob.status}</p>
        )}
        
        <button className="bg-gray-400 text-white px-3 py-1 mt-4" onClick={handleClose}>Close</button>
      </div>
    </div>
  );
}


# ======================
# File: src/pages/ResetPasswordPage.tsx
# ======================

// src/pages/ResetPasswordPage.tsx
import { PasswordInput } from "@/components/PasswordInput";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { resetPassword } from "@/features/auth/authSlice";
import type { ResetPasswordDto } from "@/features/auth/authTypes";
import { useAppDispatch, useAppSelector } from "@/store/hooks";
import { motion } from "framer-motion";
import { Key, Loader2, Lock } from "lucide-react";
import React, { useEffect, useState } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { toast } from "sonner";

export default function ResetPasswordPage() {
  const [searchParams] = useSearchParams();
  const token = searchParams.get("token") || "";
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const auth = useAppSelector((state) => state.auth);

  useEffect(() => {
    if (auth.user) {
      navigate("/dashboard", { replace: true });
    }
  }, [auth.user, navigate]);

  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [passwordError, setPasswordError] = useState("");

  const validatePassword = (password: string) => {
    return (
      password.length >= 8 &&
      /[A-Z]/.test(password) &&
      /[a-z]/.test(password) &&
      /[0-9]/.test(password) &&
      /[^A-Za-z0-9]/.test(password)
    );
  };

  useEffect(() => {
    if (!token) {
      setError("Invalid or missing reset token. Please use a valid link from your email.");
    }
  }, [token]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!token) {
      toast.error("No token provided.", { position: "bottom-left" });
      return;
    }

    if (!validatePassword(newPassword) && !validatePassword(confirmPassword)) {
      setPasswordError(
        "Password must contain at least 8 characters, uppercase, lowercase, number, and special character"
      );
      return;
    }
    
    if (newPassword !== confirmPassword) {
      toast.error("Passwords do not match.", { position: "bottom-left" });
      return;
    }

    const dto: ResetPasswordDto = { token, newPassword };
    const resultAction = await dispatch(resetPassword(dto));
    if (resetPassword.rejected.match(resultAction)) {
      const errorMsg = resultAction.payload as string;
      toast.error(`Reset failed: ${errorMsg}`, { position: "bottom-left" });
    } else {
      toast.success("Password reset success! Logging you in...", { position: "bottom-left" });
    }
  };

  if (error) {
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-blue-50/50 via-purple-50/50 to-pink-50/50 dark:from-gray-900 dark:via-gray-900 dark:to-gray-900"
      >
        <div className="w-full max-w-md bg-white dark:bg-gray-800 rounded-2xl shadow-2xl overflow-hidden">
          <div className="p-8">
            <div className="flex flex-col items-center space-y-4">
              <Key className="h-12 w-12 text-red-500/90 animate-pulse" />
              <CardTitle className="text-2xl font-bold text-center bg-gradient-to-r from-red-500 to-pink-600 bg-clip-text text-transparent">
                Reset Failed
              </CardTitle>
              <p className="text-center text-gray-600 dark:text-gray-300 bg-red-50/50 dark:bg-red-900/20 px-4 py-3 rounded-xl">
                {error}
              </p>
              <Button 
                variant="outline" 
                onClick={() => navigate("/auth?mode=login")}
                className="mt-4 border-gray-300 dark:border-gray-600 hover:bg-gray-50/50 dark:hover:bg-gray-700/50"
              >
                Return to Login
              </Button>
            </div>
          </div>
        </div>
      </motion.div>
    );
  }

  return (
    <div className="min-h-screen w-full flex items-center justify-center p-4 bg-gradient-to-br from-blue-50/50 via-purple-50/50 to-pink-50/50 dark:from-gray-900 dark:via-gray-900 dark:to-gray-900">
      <div className="w-full max-w-md bg-white dark:bg-gray-800 rounded-2xl shadow-2xl overflow-hidden">
        <Card className="border-0 shadow-none">
          <CardHeader className="space-y-1">
            <Lock className="h-12 w-12 text-blue-500/90 mx-auto animate-pulse" />
            <CardTitle className="text-3xl font-bold text-center bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              New Password
            </CardTitle>
            <p className="text-center text-gray-600 dark:text-gray-400">
              Secure your account with a new password
            </p>
          </CardHeader>

          <CardContent>
            <motion.form 
              onSubmit={handleSubmit}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="space-y-6"
            >
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label className="text-sm font-medium">New Password</Label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                    <PasswordInput
                      value={newPassword}
                      onChange={(e) => setNewPassword(e.target.value)}
                      className="pl-10 h-12 rounded-xl"
                      placeholder="••••••••"
                    />
                  </div>
                  {passwordError && (
                    <motion.p 
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      className="text-red-500 text-sm mt-1"
                    >
                      {passwordError}
                    </motion.p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label className="text-sm font-medium">Confirm Password</Label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                    <PasswordInput
                      value={confirmPassword}
                      onChange={(e) => setConfirmPassword(e.target.value)}
                      className="pl-10 h-12 rounded-xl"
                      placeholder="••••••••"
                    />
                  </div>
                </div>
              </div>

              <Button
                type="submit"
                disabled={auth.status === "loading"}
                className="w-full h-12 rounded-xl text-white text-lg bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 shadow-lg hover:shadow-blue-500/20 transition-all"
              >
                {auth.status === "loading" ? (
                  <Loader2 className="w-5 h-5 animate-spin" />
                ) : (
                  "Reset Password"
                )}
              </Button>
            </motion.form>
          </CardContent>
        </Card>
      </div>
    </div>
  );

}


# ======================
# File: src/pages/AuthPage.tsx
# ======================

// src/pages/AuthPage.tsx
import { PasswordInput } from "@/components/PasswordInput";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { forgotPassword, loginUser, signUpUser } from "@/features/auth/authSlice";
import type { ForgotPasswordDto, LoginDto, SignUpDto } from "@/features/auth/authTypes";
import { useAppDispatch, useAppSelector } from "@/store/hooks";
import { AnimatePresence, motion } from "framer-motion";
import { Building, Loader2, Lock, Mail, ShieldCheck, User, Volume2 } from "lucide-react";
import React, { useEffect, useState } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { toast } from "sonner";

const AuthVisuals = () => (
  <div className="absolute inset-0 bg-gradient-to-br from-blue-600/20 to-purple-600/20 overflow-hidden">
    <motion.div
      className="absolute w-96 h-96 bg-purple-300/10 rounded-full -top-48 -left-48"
      animate={{ scale: [1, 2, 1], rotate: [0, 360] }}
      transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
    />
    <motion.div
      className="absolute w-96 h-96 bg-blue-300/10 rounded-full -bottom-48 -right-48"
      animate={{ scale: [1, 2, 1] }}
      transition={{ duration: 15, repeat: Infinity }}
    />
  </div>
);

export default function AuthPage() {
  const auth = useAppSelector((state) => state.auth);
  const dispatch = useAppDispatch();
  const navigate = useNavigate();

  // if user is already logged in => redirect to dashboard
  useEffect(() => {
    if (auth.user) {
      navigate("/dashboard", { replace: true });
    }
  }, [auth.user, navigate]);

  const [searchParams] = useSearchParams();
  const modeParam = (searchParams.get("mode") as "login" | "signup" | "forgot") || "login";
  const [mode, setMode] = useState<"signup" | "login" | "forgot">(modeParam);

  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [name, setName] = useState("");
  const [forgotEmail, setForgotEmail] = useState("");

  // const [phoneNumber, setPhoneNumber] = useState("");
  const [organization, setOrganization] = useState("");
  // const [country, setCountry] = useState("IN");
  const [emailError, setEmailError] = useState("");
  const [passwordError, setPasswordError] = useState("");
  // const [showAuthModal, setShowAuthModal] = useState(false);

  const validateEmail = (email: string) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(String(email).toLowerCase());
  };

  const validatePassword = (password: string) => {
    return (
      password.length >= 8 &&
      /[A-Z]/.test(password) &&
      /[a-z]/.test(password) &&
      /[0-9]/.test(password) &&
      /[^A-Za-z0-9]/.test(password)
    );
  };

  const handleModeSwitch = (m: typeof mode) => {
    setMode(m);
    setEmail("");
    setPassword("");
    setName("");
    setForgotEmail("");
  };

  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newEmail = e.target.value;
    setEmail(newEmail);
    setEmailError(""); // Clear error when typing

    // Validate after 500ms of no typing
    if (mode === "signup" || mode === "login") {
      setTimeout(() => {
        if (!validateEmail(newEmail) && newEmail.length > 0) {
          setEmailError("Please enter a valid email address");
        }
      }, 500);
    }
  };

  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newPassword = e.target.value;
    setPassword(newPassword);
    setPasswordError(""); // Clear error when typing

    // Validate after 500ms of no typing
    if (mode === "signup" && newPassword.length > 0) {
      setTimeout(() => {
        if (!validatePassword(newPassword)) {
          setPasswordError(
            "Password must contain at least 8 characters, uppercase, lowercase, number, and special character"
          );
        }
      }, 500);
    }
  };

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateEmail(email)) {
      setEmailError("Please enter a valid email address");
      return;
    }
    const dto: LoginDto = { email, password };
    const resultAction = await dispatch(loginUser(dto));
    if (loginUser.rejected.match(resultAction)) {
      const errorMsg = resultAction.payload as string;
      toast.error("Login failed: " + errorMsg, { position: "bottom-left" });
    } else {
      toast.success("Login success!", { position: "bottom-left" });
      // slice will set user => effect => nav /dashboard
    }
  };

  const handleSignup = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateEmail(email)) {
      setEmailError("Please enter a valid email address");
      return;
    }

    if (!validatePassword(password)) {
      setPasswordError(
        "Password must contain at least 8 characters, uppercase, lowercase, number, and special character"
      );
      return;
    }
    const dto: SignUpDto = { email, password, name };
    const resultAction = await dispatch(signUpUser(dto));
    if (signUpUser.rejected.match(resultAction)) {
      const errorMsg = resultAction.payload as string;
      toast.error("Sign Up failed: " + errorMsg, { position: "bottom-left" });
    } else {
      toast.success("Sign Up success!", { position: "bottom-left" });
    }
  };

  const handleForgot = async (e: React.FormEvent) => {
    e.preventDefault();
    const dto: ForgotPasswordDto = { email: forgotEmail };
    const resultAction = await dispatch(forgotPassword(dto));
    if (forgotPassword.rejected.match(resultAction)) {
      const errorMsg = resultAction.payload as string;
      toast.error("Forgot password failed: " + errorMsg, { position: "bottom-left" });
    } else {
      toast.success("Reset link sent. Check your email.", { position: "bottom-left" });
      setMode("login");
    }
  };

  const handleGoogleLogin = () => {
    // redirect to your backend
    const BACKEND = import.meta.env.VITE_API_BASE_URL?.replace("/api/v1", "") || "http://localhost:3000";
    window.location.href = BACKEND + "/api/v1/auth/google";
  };

  return (
    <div className="min-h-max my-9 h-full w-full flex items-center justify-center p-2 bg-gradient-to-br from-blue-50/50 via-purple-50/50 to-pink-50/50 dark:from-gray-900 dark:via-gray-900 dark:to-gray-900">
      <div className="w-full max-w-6xl flex bg-white dark:bg-gray-800 rounded-3xl shadow-2xl overflow-hidden">
        {/* Visual Section */}
        <div className="hidden md:block flex-1 relative bg-gradient-to-br from-blue-600 to-purple-600">
          <AuthVisuals />
          <div className="relative z-10 p-12 h-full flex flex-col justify-between text-white">
            <div>
              <h2 className="text-4xl font-bold mb-4">Transform Audio to Text</h2>
              <p className="text-lg opacity-90">AI-Powered Speech Recognition with 99% Accuracy</p>
            </div>
            <div className="space-y-4">
              <div className="flex items-center gap-4">
                <Volume2 className="h-8 w-8" />
                <div>
                  <h3 className="font-semibold">50+ Languages Supported</h3>
                  <p className="text-sm opacity-80">Real-time transcription & translation</p>
                </div>
              </div>
              <Separator className="bg-white/20" />
              <div className="flex items-center gap-4">
                <ShieldCheck className="h-8 w-8" />
                <div>
                  <h3 className="font-semibold">Enterprise Security</h3>
                  <p className="text-sm opacity-80">GDPR compliant & military-grade encryption</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Form Section */}
        <div className="flex-1 flex items-center justify-center p-2 bg-white dark:bg-gray-900">
          <Card className="w-full max-w-lg border-0 shadow-none">
            <CardHeader className="px-0">
              {mode === "forgot" ? (
                <CardTitle className="text-2xl font-bold text-center bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  Reset Password
                </CardTitle>
              ) : (
                <Tabs value={mode} className="w-full">
                  <TabsList className="grid grid-cols-2 w-full h-14 bg-gray-100 dark:bg-gray-800 rounded-xl p-2">
                    <TabsTrigger
                      value="login"
                      onClick={() => handleModeSwitch("login")}
                      className="rounded-lg data-[state=active]:bg-white data-[state=active]:shadow-sm data-[state=active]:dark:bg-gray-700 h-10"
                    >
                      Login
                    </TabsTrigger>
                    <TabsTrigger
                      value="signup"
                      onClick={() => handleModeSwitch("signup")}
                      className="rounded-lg data-[state=active]:bg-white data-[state=active]:shadow-sm data-[state=active]:dark:bg-gray-700 h-10"
                    >
                      Sign Up
                    </TabsTrigger>
                  </TabsList>
                </Tabs>
              )}
            </CardHeader>

            <CardContent className="px-0 flex flex-col h-[550px]">
              <div className="space-y-6 flex-1 overflow-y-auto p-4">
                {(mode === "login" || mode === "signup") && (
                  <>
                    <Button
                      variant="outline"
                      className="w-full h-12 gap-3 text-base border-gray-300 dark:border-gray-600"
                      onClick={handleGoogleLogin}
                    >
                      <svg width="18" height="18" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48">
                        {" "}
                        <path
                          fill="#EA4335"
                          d="M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z"
                        />{" "}
                        <path
                          fill="#4285F4"
                          d="M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z"
                        />{" "}
                        <path
                          fill="#FBBC05"
                          d="M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z"
                        />{" "}
                        <path
                          fill="#34A853"
                          d="M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z"
                        />{" "}
                      </svg>
                      Continue with Google
                    </Button>
                    <div className="relative my-4">
                      <div className="flex items-center gap-3">
                        <div className="flex-1 h-px bg-gradient-to-r from-transparent via-gray-300 to-transparent dark:via-gray-600"></div>
                        <span className="text-sm font-medium text-gray-400 dark:text-gray-400 bg-background/80 px-2 rounded-full backdrop-blur-sm">
                          OR
                        </span>
                        <div className="flex-1 h-px bg-gradient-to-r from-transparent via-gray-300 to-transparent dark:via-gray-600"></div>
                      </div>
                    </div>
                  </>
                )}

                <AnimatePresence mode="wait">
                  {mode === "login" && (
                    <motion.form
                      key="login"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      onSubmit={handleLogin}
                      className="space-y-6"
                    >
                      <div className="space-y-4">
                        <div className="space-y-2">
                          <Label className="text-sm font-medium">Email</Label>
                          <div className="relative">
                            <Mail className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                            <Input
                              type="email"
                              placeholder="hello@example.com"
                              value={email}
                              onChange={handleEmailChange}
                              className="pl-10 h-12 rounded-xl"
                            />
                          </div>
                          {emailError && <motion.p className="text-red-500 text-sm mt-1">{emailError}</motion.p>}
                        </div>

                        <div className="space-y-2">
                          <Label className="text-sm font-medium">Password</Label>
                          <div className="relative">
                            <Lock className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                            <PasswordInput
                              placeholder="••••••••"
                              value={password}
                              onChange={handlePasswordChange}
                              className="pl-10 h-12 rounded-xl"
                            />
                          </div>
                        </div>
                      </div>

                      <Button
                        type="submit"
                        className="w-full h-12 rounded-xl text-lg bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-amber-50"
                      >
                        {auth.status === "loading" ? <Loader2 className="animate-spin" /> : "Login"}
                      </Button>
                    </motion.form>
                  )}

                  {mode === "signup" && (
                    <motion.form
                      key="signup"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      onSubmit={handleSignup}
                      className="space-y-6"
                    >
                      <div className="grid gap-4">
                        <div className="flex gap-4">
                          {/* Full Name */}
                          <div className="space-y-2 flex-1">
                            <Label className="text-sm font-medium">Full Name</Label>
                            <div className="relative">
                              <User className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                              <Input
                                placeholder="John Doe"
                                value={name}
                                onChange={(e) => setName(e.target.value)}
                                className="pl-10 h-12 rounded-xl"
                              />
                            </div>
                          </div>

                          {/* Organization */}
                          <div className="space-y-2 flex-1">
                            <Label className="text-sm font-medium text-gray-500">Organization (optional)</Label>
                            <div className="relative">
                              <Building className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                              <Input
                                placeholder="Company Name"
                                value={organization}
                                onChange={(e) => setOrganization(e.target.value)}
                                className="pl-10 h-12 rounded-xl"
                              />
                            </div>
                          </div>
                        </div>

                        <div className="space-y-2">
                          <Label className="text-sm font-medium">Email</Label>
                          <div className="relative">
                            <Mail className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                            <Input
                              type="email"
                              placeholder="hello@example.com"
                              value={email}
                              onChange={handleEmailChange}
                              className="pl-10 h-12 rounded-xl"
                            />
                          </div>
                          {emailError && <motion.p className="text-red-500 text-sm mt-1">{emailError}</motion.p>}
                        </div>

                        <div className="space-y-2">
                          <Label className="text-sm font-medium">Password</Label>
                          <div className="relative">
                            <Lock className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                            <PasswordInput
                              placeholder="••••••••"
                              value={password}
                              onChange={handlePasswordChange}
                              className="pl-10 h-12 rounded-xl"
                            />
                          </div>
                          {passwordError && <motion.p className="text-red-500 text-sm mt-1">{passwordError}</motion.p>}
                        </div>
                      </div>

                      <Button
                        type="submit"
                        className="w-full h-12 rounded-xl text-lg bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-amber-50"
                      >
                        {auth.status === "loading" ? <Loader2 className="animate-spin" /> : "Create Account"}
                      </Button>
                    </motion.form>
                  )}

                  {mode === "forgot" && (
                    <motion.form
                      key="forgot"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      onSubmit={handleForgot}
                      className="space-y-6"
                    >
                      <div className="space-y-4">
                        <div className="space-y-2">
                          <Label className="text-sm font-medium">Email</Label>
                          <div className="relative">
                            <Mail className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                            <Input
                              type="email"
                              placeholder="hello@example.com"
                              value={forgotEmail}
                              onChange={(e) => setForgotEmail(e.target.value)}
                              className="pl-10 h-12 rounded-xl"
                            />
                          </div>
                        </div>
                      </div>

                      <Button
                        type="submit"
                        className="w-full h-12 rounded-xl text-lg bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                      >
                        {auth.status === "loading" ? <Loader2 className="animate-spin" /> : "Send Reset Link"}
                      </Button>
                    </motion.form>
                  )}
                </AnimatePresence>
              </div>

              <div className="text-center pt-4">
                <Button
                  variant="link"
                  className="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600"
                  onClick={() => {
                    if (mode === "login") handleModeSwitch("forgot");
                    else if (mode === "signup") handleModeSwitch("login");
                    else handleModeSwitch("login");
                  }}
                >
                  {mode === "login" && "Forgot password?"}
                  {mode === "signup" && "Already have an account?"}
                  {mode === "forgot" && "Return to login"}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );

  // return (
  //   <div className="min-h-screen w-full flex items-center justify-center p-4 bg-gradient-to-br from-blue-50/50 via-purple-50/50 to-pink-50/50 dark:from-gray-900 dark:via-gray-900 dark:to-gray-900">
  //     <div className="w-full max-w-6xl flex bg-white dark:bg-gray-800 rounded-3xl shadow-2xl overflow-hidden">
  //       {/* Visual Section */}
  //       <div className="hidden md:block flex-1 relative bg-gradient-to-br from-blue-600 to-purple-600">
  //         <AuthVisuals />
  //         <div className="relative z-10 p-12 h-full flex flex-col justify-between text-white">
  //           <div>
  //             <h2 className="text-4xl font-bold mb-4">Transform Audio to Text</h2>
  //             <p className="text-lg opacity-90">AI-Powered Speech Recognition with 99% Accuracy</p>
  //           </div>
  //           <div className="space-y-4">
  //             <div className="flex items-center gap-4">
  //               <Volume2 className="h-8 w-8" />
  //               <div>
  //                 <h3 className="font-semibold">50+ Languages Supported</h3>
  //                 <p className="text-sm opacity-80">Real-time transcription & translation</p>
  //               </div>
  //             </div>
  //             <Separator className="bg-white/20" />
  //             <div className="flex items-center gap-4">
  //               <ShieldCheck className="h-8 w-8" />
  //               <div>
  //                 <h3 className="font-semibold">Enterprise Security</h3>
  //                 <p className="text-sm opacity-80">GDPR compliant & military-grade encryption</p>
  //               </div>
  //             </div>
  //           </div>
  //         </div>
  //       </div>

  //       {/* Form Section (40%) */}
  //       <div className="flex-1 flex items-center justify-center p-8 bg-white dark:bg-gray-900">
  //         <Card className="w-full max-w-lg border-0 shadow-none">
  //           <CardHeader className="px-0">
  //             <Tabs value={mode} className="w-full">
  //               <TabsList className="grid grid-cols-2 w-full h-14 bg-gray-100 dark:bg-gray-800 rounded-xl p-2">
  //                 <TabsTrigger
  //                   value="login"
  //                   onClick={() => handleModeSwitch("login")}
  //                   className="rounded-lg data-[state=active]:bg-white data-[state=active]:shadow-sm data-[state=active]:dark:bg-gray-700 h-10"
  //                 >
  //                   Login
  //                 </TabsTrigger>
  //                 <TabsTrigger
  //                   value="signup"
  //                   onClick={() => handleModeSwitch("signup")}
  //                   className="rounded-lg data-[state=active]:bg-white data-[state=active]:shadow-sm data-[state=active]:dark:bg-gray-700 h-10"
  //                 >
  //                   Sign Up
  //                 </TabsTrigger>
  //               </TabsList>
  //             </Tabs>
  //           </CardHeader>

  //           <CardContent className="px-0 space-y-6">
  //             <Button
  //               variant="outline"
  //               className="w-full h-12 gap-3 text-base border-gray-300 dark:border-gray-600"
  //               onClick={handleGoogleLogin}
  //             >
  //               <svg width="20" height="20" viewBox="0 0 48 48">
  //                 {/* Google SVG */}
  //               </svg>
  //               Continue with Google
  //             </Button>

  //             <Separator className="my-6 text-gray-300 dark:text-gray-600" />

  //             <AnimatePresence mode="wait">
  //               {mode === "login" ? (
  //                 <motion.form
  //                   key="login"
  //                   initial={{ opacity: 0 }}
  //                   animate={{ opacity: 1 }}
  //                   exit={{ opacity: 0 }}
  //                   onSubmit={handleLogin}
  //                   className="space-y-6"
  //                 >
  //                   <div className="space-y-4">
  //                     <div className="space-y-2">
  //                       <Label className="text-sm font-medium">Email</Label>
  //                       <div className="relative">
  //                         <Mail className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
  //                         <Input
  //                           type="email"
  //                           placeholder="hello@example.com"
  //                           value={email}
  //                           onChange={handleEmailChange}
  //                           className="pl-10 h-12 rounded-xl"
  //                         />
  //                       </div>
  //                       {emailError && <motion.p className="text-red-500 text-sm mt-1">{emailError}</motion.p>}
  //                     </div>

  //                     <div className="space-y-2">
  //                       <Label className="text-sm font-medium">Password</Label>
  //                       <div className="relative">
  //                         <Lock className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
  //                         <PasswordInput
  //                           placeholder="••••••••"
  //                           value={password}
  //                           onChange={handlePasswordChange}
  //                           className="pl-10 h-12 rounded-xl"
  //                         />
  //                       </div>
  //                     </div>
  //                   </div>

  //                   <Button
  //                     type="submit"
  //                     className="w-full h-12 rounded-xl text-lg bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
  //                   >
  //                     {auth.status === "loading" ? <Loader2 className="animate-spin" /> : "Login"}
  //                   </Button>
  //                 </motion.form>
  //               ) : (
  //                 <motion.form
  //                   key="signup"
  //                   initial={{ opacity: 0 }}
  //                   animate={{ opacity: 1 }}
  //                   exit={{ opacity: 0 }}
  //                   onSubmit={handleSignup}
  //                   className="space-y-6"
  //                 >
  //                   <div className="grid gap-4">
  //                     <div className="space-y-2">
  //                       <Label className="text-sm font-medium">Full Name</Label>
  //                       <div className="relative">
  //                         <User className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
  //                         <Input
  //                           placeholder="John Doe"
  //                           value={name}
  //                           onChange={(e) => setName(e.target.value)}
  //                           className="pl-10 h-12 rounded-xl"
  //                         />
  //                       </div>
  //                     </div>

  //                     <div className="space-y-2">
  //                       <Label className="text-sm font-medium">Email</Label>
  //                       <div className="relative">
  //                         <Mail className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
  //                         <Input
  //                           type="email"
  //                           placeholder="hello@example.com"
  //                           value={email}
  //                           onChange={handleEmailChange}
  //                           className="pl-10 h-12 rounded-xl"
  //                         />
  //                       </div>
  //                       {emailError && <motion.p className="text-red-500 text-sm mt-1">{emailError}</motion.p>}
  //                     </div>

  //                     <div className="grid grid-cols-2 gap-4">
  //                       <div className="space-y-2">
  //                         <Label className="text-sm font-medium">Country</Label>
  //                         <div className="relative">
  //                           <Globe className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
  //                           <select
  //                             value={country}
  //                             onChange={(e) => setCountry(e.target.value)}
  //                             className="w-full pl-10 h-12 rounded-xl border bg-background"
  //                           >
  //                             {countryList.map((c) => (
  //                               <option key={c.code} value={c.code}>
  //                                 {c.name}
  //                               </option>
  //                             ))}
  //                           </select>
  //                         </div>
  //                       </div>

  //                       <div className="space-y-2">
  //                         {/* <Label className="text-sm font-medium">Phone Number</Label> */}
  //                         <div className="relative">
  //                           <Globe className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
  //                           <PhoneInput
  //                             country={country.toLowerCase()}
  //                             value={phoneNumber}
  //                             onChange={setPhoneNumber}
  //                             inputClass="w-full pl-10 h-12 rounded-xl"
  //                             containerClass="!w-full"
  //                           />
  //                         </div>
  //                       </div>
  //                     </div>

  //                     <div className="space-y-2">
  //                       <Label className="text-sm font-medium text-gray-500">Organization (optional)</Label>
  //                       <div className="relative">
  //                         <Building className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
  //                         <Input
  //                           placeholder="Company Name"
  //                           value={organization}
  //                           onChange={(e) => setOrganization(e.target.value)}
  //                           className="pl-10 h-12 rounded-xl border-gray-200 dark:border-gray-600"
  //                         />
  //                       </div>
  //                     </div>

  //                     <div className="space-y-2">
  //                       <Label className="text-sm font-medium">Password</Label>
  //                       <div className="relative">
  //                         <Lock className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
  //                         <PasswordInput
  //                           placeholder="••••••••"
  //                           value={password}
  //                           onChange={handlePasswordChange}
  //                           className="pl-10 h-12 rounded-xl"
  //                         />
  //                         {passwordError && <motion.p className="text-red-500 text-sm mt-1">{passwordError}</motion.p>}
  //                       </div>
  //                     </div>
  //                   </div>

  //                   <Button
  //                     type="submit"
  //                     className="w-full h-12 rounded-xl text-lg bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
  //                   >
  //                     {auth.status === "loading" ? <Loader2 className="animate-spin" /> : "Create Account"}
  //                   </Button>
  //                 </motion.form>
  //               )}
  //             </AnimatePresence>

  //             <div className="text-center">
  //               <Button
  //                 variant="link"
  //                 className="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600"
  //                 onClick={() => handleModeSwitch(mode === "login" ? "forgot" : "login")}
  //               >
  //                 {mode === "login" ? "Forgot password?" : "Already have an account?"}
  //               </Button>
  //             </div>
  //           </CardContent>
  //         </Card>
  //       </div>
  //     </div>
  //   </div>
  // );

  // return (
  //   <div className="min-h-screen w-full bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 dark:from-gray-800 dark:via-gray-900 dark:to-gray-950 flex items-center justify-center p-4">
  //     <Card className="w-full max-w-md backdrop-blur-lg bg-white/50 dark:bg-gray-900/50 shadow-xl rounded-2xl">
  //       <CardHeader className="space-y-1">
  //         <CardTitle className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent text-center">
  //           {mode === "login" && "Welcome Back"}
  //           {mode === "signup" && "Create Account"}
  //           {mode === "forgot" && "Reset Password"}
  //         </CardTitle>
  //       </CardHeader>

  //       <CardContent className="grid gap-4">
  //         {(mode === "login" || mode === "signup") && (
  //           <>
  //             <Button
  //               variant="outline"
  //               className="w-full gap-3 bg-white hover:bg-gray-50 dark:bg-white dark:hover:bg-gray-50 dark:text-gray-900 text-gray-900 border border-gray-200 font-medium text-sm h-10"
  //               onClick={handleGoogleLogin}
  //             >
  //               <svg width="18" height="18" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48">
  //                 <path
  //                   fill="#EA4335"
  //                   d="M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z"
  //                 />
  //                 <path
  //                   fill="#4285F4"
  //                   d="M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z"
  //                 />
  //                 <path
  //                   fill="#FBBC05"
  //                   d="M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z"
  //                 />
  //                 <path
  //                   fill="#34A853"
  //                   d="M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z"
  //                 />
  //               </svg>
  //               Continue with Google
  //             </Button>
  //             <Separator className="my-2" />
  //           </>
  //         )}

  //         {mode === "login" && (
  //           <form onSubmit={handleLogin} className="space-y-4">
  //             <div className="space-y-2">
  //               <Label className="text-sm font-medium">Email</Label>
  //               <Input
  //                 type="email"
  //                 placeholder="hello@example.com"
  //                 value={email}
  //                 onChange={handleEmailChange}
  //                 className="rounded-lg py-2 px-4 focus-visible:ring-blue-500"
  //                 required
  //               />
  //               {emailError && <p className="text-red-500 text-sm">{emailError}</p>}
  //             </div>
  //             <div className="space-y-2">
  //               <Label className="text-sm font-medium">Password</Label>
  //               <PasswordInput
  //                 placeholder="••••••••"
  //                 value={password}
  //                 onChange={handlePasswordChange}
  //                 className="rounded-lg py-2 px-4 focus-visible:ring-blue-500"
  //                 required
  //               />
  //               {passwordError && <p className="text-red-500 text-sm">{passwordError}</p>}
  //             </div>
  //             <Button
  //               type="submit"
  //               disabled={auth.status === "loading"}
  //               className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-lg transition-all"
  //             >
  //               {auth.status === "loading" ? <Loader2 className="w-4 h-4 animate-spin" /> : "Login"}
  //             </Button>
  //           </form>
  //         )}

  //         {mode === "signup" && (
  //           <form onSubmit={handleSignup} className="space-y-4">
  //             <div className="space-y-2">
  //               <Label className="text-sm font-medium">Name</Label>
  //               <Input
  //                 type="text"
  //                 placeholder="John Doe"
  //                 value={name}
  //                 onChange={(e) => setName(e.target.value)}
  //                 className="rounded-lg py-2 px-4 focus-visible:ring-blue-500"
  //                 required
  //               />
  //             </div>
  //             <div className="space-y-2">
  //               <Label className="text-sm font-medium">Email</Label>
  //               <Input
  //                 type="email"
  //                 placeholder="hello@example.com"
  //                 value={email}
  //                 onChange={handleEmailChange}
  //                 className="rounded-lg py-2 px-4 focus-visible:ring-blue-500"
  //                 required
  //               />
  //               {emailError && <p className="text-red-500 text-sm">{emailError}</p>}
  //             </div>
  //             <div className="space-y-4">
  //               {/* Name field remains same */}

  //               {/* Country Select */}
  //               <div className="space-y-2">
  //                 <Label className="text-sm font-medium">Country</Label>
  //                 <select
  //                   value={country}
  //                   onChange={(e) => setCountry(e.target.value)}
  //                   className="w-full p-2 border rounded-lg bg-background"
  //                 >
  //                   {countryList.map((c) => (
  //                     <option key={c.code} value={c.code}>
  //                       {c.name} ({c.dial_code})
  //                     </option>
  //                   ))}
  //                 </select>
  //               </div>

  //               {/* Phone Number */}
  //               <div className="space-y-2">
  //                 <Label className="text-sm font-medium">Phone Number (optional)</Label>
  //                 <PhoneInput
  //                   country={country.toLowerCase()}
  //                   value={phoneNumber}
  //                   onChange={(value) => setPhoneNumber(value)}
  //                   inputClass="w-full p-2 border rounded-lg"
  //                 />
  //               </div>

  //               {/* Organization */}
  //               <div className="space-y-2">
  //                 <Label className="text-sm font-medium">Organization (optional)</Label>
  //                 <Input
  //                   type="text"
  //                   placeholder="Company Name"
  //                   value={organization}
  //                   onChange={(e) => setOrganization(e.target.value)}
  //                 />
  //               </div>

  //               {/* Email field remains same */}

  //               {/* Password Field */}
  //               <div className="space-y-2">
  //                 <Label className="text-sm font-medium">Create Password</Label>
  //                 <PasswordInput placeholder="••••••••" value={password} onChange={handlePasswordChange} />
  //                 {passwordError && <p className="text-red-500 text-sm">{passwordError}</p>}
  //               </div>
  //             </div>
  //             <Button
  //               type="submit"
  //               disabled={auth.status === "loading"}
  //               className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-lg transition-all"
  //             >
  //               {auth.status === "loading" ? <Loader2 className="w-4 h-4 animate-spin" /> : "Sign Up"}
  //             </Button>
  //           </form>
  //         )}

  //         {mode === "forgot" && (
  //           <form onSubmit={handleForgot} className="space-y-4">
  //             <div className="space-y-2">
  //               <Label className="text-sm font-medium">Email</Label>
  //               <Input
  //                 type="email"
  //                 placeholder="hello@example.com"
  //                 value={forgotEmail}
  //                 onChange={(e) => setForgotEmail(e.target.value)}
  //                 className="rounded-lg py-2 px-4 focus-visible:ring-blue-500"
  //                 required
  //               />
  //             </div>
  //             <Button
  //               type="submit"
  //               disabled={auth.status === "loading"}
  //               className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-lg transition-all"
  //             >
  //               {auth.status === "loading" ? <Loader2 className="w-4 h-4 animate-spin" /> : "Send Reset Link"}
  //             </Button>
  //           </form>
  //         )}
  //       </CardContent>

  //       <CardFooter className="flex flex-col gap-3">
  //         {mode === "login" && (
  //           <>
  //             <p className="text-sm text-gray-600 dark:text-gray-400">
  //               Don't have an account?{" "}
  //               <Button
  //                 variant="link"
  //                 className="text-blue-600 px-0 hover:text-blue-700 dark:text-blue-400"
  //                 onClick={() => handleModeSwitch("signup")}
  //               >
  //                 Sign up
  //               </Button>
  //             </p>
  //             <Button
  //               variant="link"
  //               className="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600 px-0"
  //               onClick={() => handleModeSwitch("forgot")}
  //             >
  //               Forgot password?
  //             </Button>
  //           </>
  //         )}

  //         {mode === "signup" && (
  //           <p className="text-sm text-gray-600 dark:text-gray-400">
  //             Already have an account?{" "}
  //             <Button
  //               variant="link"
  //               className="text-blue-600 px-0 hover:text-blue-700 dark:text-blue-400"
  //               onClick={() => handleModeSwitch("login")}
  //             >
  //               Login here
  //             </Button>
  //           </p>
  //         )}

  //         {mode === "forgot" && (
  //           <Button
  //             variant="link"
  //             className="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600 px-0"
  //             onClick={() => handleModeSwitch("login")}
  //           >
  //             Return to Login
  //           </Button>
  //         )}
  //       </CardFooter>
  //     </Card>
  //   </div>
  // );
}


# ======================
# File: src/pages/AdminPanel.tsx
# ======================

import React from 'react';

export default function AdminPanel() {
  return (
    <div>
      <h1>Admin Panel</h1>
      <p>Only accessible by role=admin</p>
    </div>
  );
}


# ======================
# File: src/pages/UpgradePage.tsx
# ======================

import React from 'react';

export default function UpgradePage() {
  return (
    <div>
      <h2>Upgrade Your Plan</h2>
      <p>Subscribe to a paid plan to access premium features!</p>
      {/* Payment logic or subscription detail can go here */}
    </div>
  );
}


# ======================
# File: src/pages/PlansPage.tsx
# ======================

import React, { useEffect } from 'react'
import { useAppDispatch, useAppSelector } from '@/store/hooks'
import { fetchPublicPlans } from '@/features/public/publicSlice'
import { motion } from 'framer-motion'
import { Button } from '@/components/ui/button'
import { Check, Zap, Clock, FileUp, Globe, Rocket, Gauge } from 'lucide-react'
import { Skeleton } from '@/components/ui/skeleton'
import { cn } from '@/lib/utils'

export default function PlansPage() {
  const dispatch = useAppDispatch()
  const { plans, status, error } = useAppSelector((state) => state.public)

  useEffect(() => {
    if (plans.length === 0) dispatch(fetchPublicPlans())
  }, [dispatch, plans.length])

  const planFeatures = {
    free: [
      { icon: <FileUp className="h-5 w-5" />, text: "3 Transcripts Daily" },
      { icon: <Clock className="h-5 w-5" />, text: "30 Minute Upload Limit" },
      { icon: <Gauge className="h-5 w-5" />, text: "Lower Processing Priority" }
    ],
    pro: [
      { icon: <Rocket className="h-5 w-5" />, text: "Unlimited Transcriptions" },
      { icon: <Clock className="h-5 w-5" />, text: "10 Hour Upload Limit" },
      { icon: <Zap className="h-5 w-5" />, text: "Highest Processing Priority" },
      { icon: <Globe className="h-5 w-5" />, text: "134+ Language Translations" },
      { icon: <FileUp className="h-5 w-5" />, text: "Bulk Upload (50 files)" }
    ]
  }

  return (
    <div className="min-h-screen py-20 bg-gradient-to-b from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-950">
      <div className="container mx-auto px-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-16"
        >
          <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-4">
            Transcribe Without Limits
          </h1>
          <p className="text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
            Start with free basic transcription, unlock powerful features with our Pro plan
          </p>
        </motion.div>

        {status === 'loading' && (
          <div className="grid md:grid-cols-3 gap-8">
            {[1, 2, 3].map((i) => (
              <Skeleton key={i} className="h-96 rounded-2xl" />
            ))}
          </div>
        )}

        {status === 'failed' && (
          <div className="text-center text-red-500 text-xl">{error}</div>
        )}

        {status === 'succeeded' && (
          <div className="flex flex-col lg:flex-row items-center justify-center gap-8">
            {plans.map((plan, index) => (
              <motion.div
                key={plan._id}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ delay: index * 0.2 }}
                className={cn(
                  "relative w-full max-w-md p-8 bg-white dark:bg-gray-800 rounded-2xl shadow-xl transition-all duration-300 hover:shadow-2xl",
                  index === 1 ? 
                    "scale-110 z-10 border-2 border-purple-500 bg-gradient-to-b from-purple-50 to-white dark:from-purple-900/30 dark:to-gray-800" : 
                    "border dark:border-gray-700",
                  "hover:-translate-y-2"
                )}
              >
                {index === 1 && (
                  <div className="absolute top-0 right-0 bg-purple-500 text-white px-4 py-1 rounded-bl-xl rounded-tr-xl text-sm">
                    Most Popular 🚀
                  </div>
                )}

                <div className="mb-8">
                  <h3 className="text-2xl font-bold mb-2">{plan.name}</h3>
                  <div className="text-4xl font-bold mb-4">
                    {plan.isPaid ? `$${plan.price}` : 'Free'}
                    {plan.isPaid && <span className="text-lg text-gray-500">/{plan.currency}/mo</span>}
                  </div>
                  
                  <div className="flex items-center gap-2 mb-6 p-4 bg-blue-50 dark:bg-gray-700 rounded-lg">
                    <Zap className="h-5 w-5 text-blue-500" />
                    <span className="text-gray-600 dark:text-gray-300">
                      {plan.totalLimit} mins/day transcription
                    </span>
                  </div>
                </div>

                <ul className="space-y-4 mb-8">
                  {(plan.isPaid ? planFeatures.pro : planFeatures.free).map((feature, i) => (
                    <li key={i} className="flex items-start gap-3 text-gray-600 dark:text-gray-300">
                      <span className="text-purple-500 mt-0.5">{feature.icon}</span>
                      <span>{feature.text}</span>
                    </li>
                  ))}
                </ul>

                <Button 
                  className="w-full group"
                  variant={index === 1 ? "default" : "outline"}
                  size="lg"
                >
                  <span className="group-hover:scale-105 transition-transform">
                    {plan.isPaid ? 'Go Pro Now' : 'Start Free'}
                  </span>
                </Button>

                {!plan.isPaid && (
                  <p className="text-center mt-4 text-sm text-gray-500 dark:text-gray-400">
                    No credit card required
                  </p>
                )}
              </motion.div>
            ))}
          </div>
        )}

        {/* Feature Comparison Table */}
        <motion.div
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          className="mt-20 bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-xl"
        >
          <h3 className="text-2xl font-bold mb-6">Full Feature Comparison</h3>
          <table className="w-full">
            <tbody>
              <tr className="border-b dark:border-gray-700">
                <td className="py-4 font-medium">File Duration Limit</td>
                <td className="py-4 text-center">30 mins</td>
                <td className="py-4 text-center text-purple-500 font-semibold">10 hours</td>
              </tr>
              <tr className="border-b dark:border-gray-700">
                <td className="py-4 font-medium">Processing Priority</td>
                <td className="py-4 text-center">Standard</td>
                <td className="py-4 text-center text-purple-500 font-semibold">Highest</td>
              </tr>
              <tr className="border-b dark:border-gray-700">
                <td className="py-4 font-medium">Language Support</td>
                <td className="py-4 text-center">5 languages</td>
                <td className="py-4 text-center text-purple-500 font-semibold">134+ languages</td>
              </tr>
              <tr>
                <td className="py-4 font-medium">Bulk Exports</td>
                <td className="py-4 text-center">-</td>
                <td className="py-4 text-center text-purple-500 font-semibold">✅</td>
              </tr>
            </tbody>
          </table>
        </motion.div>
      </div>
    </div>
  )
}

# ======================
# File: src/pages/HomePage.tsx
# ======================

// src/pages/HomePage.tsx
import { Button } from "@/components/ui/button";
import { Carousel, CarouselContent, CarouselItem } from "@/components/ui/carousel";
import { fetchPublicFeedback, fetchPublicPlans } from "@/features/public/publicSlice";
import { cn } from "@/lib/utils";
import { useAppDispatch, useAppSelector } from "@/store/hooks";
import { motion } from "framer-motion";
import {
  BadgeCheck,
  Check,
  ChevronDown,
  Clock,
  FileText,
  GraduationCap,
  Languages,
  Mic,
  Podcast,
  Star,
  User,
  Video,
  Volume2,
  Zap
} from "lucide-react";
import { useEffect } from "react";
import { Link, Navigate } from "react-router-dom";

export default function HomePage() {
  const dispatch = useAppDispatch();
  const auth = useAppSelector((state) => state.auth);

  const publicState = useAppSelector((state) => state.public);
  const { plans, feedback, status } = publicState;

  useEffect(() => {
    if (plans.length === 0) dispatch(fetchPublicPlans());
    if (feedback.length === 0) dispatch(fetchPublicFeedback());
  }, [dispatch, plans.length, feedback.length]);
  
  if (auth.user) {
    return <Navigate to="/dashboard" replace />;
  }

  const features = [
    {
      icon: <Mic className="h-8 w-8" />,
      title: "Real-time Transcription",
      description: "Instant audio-to-text conversion with 99% accuracy",
    },
    {
      icon: <Languages className="h-8 w-8" />,
      title: "50+ Languages",
      description: "Support for global languages and dialects",
    },
    {
      icon: <Clock className="h-8 w-8" />,
      title: "Lightning Fast",
      description: "1 hour audio processed in 5 minutes",
    },
    {
      icon: <FileText className="h-8 w-8" />,
      title: "Multi-Format Export",
      description: "TXT, DOCX, SRT, VTT and more",
    },
    {
      icon: <Volume2 className="h-8 w-8" />,
      title: "Audio Enhancement",
      description: "Noise reduction & audio cleanup",
    },
    {
      icon: <BadgeCheck className="h-8 w-8" />,
      title: "Enterprise Security",
      description: "GDPR compliant & military-grade encryption",
    },
  ];

  const useCases = [
    { icon: <Podcast />, title: "Podcasters", text: "Generate show notes & transcripts automatically" },
    { icon: <GraduationCap />, title: "Students", text: "Lecture recordings to study notes in minutes" },
    { icon: <User />, title: "Journalists", text: "Interview transcription with speaker identification" },
    { icon: <Video />, title: "Creators", text: "Auto-generate subtitles for your videos" },
  ];

  const HeroVisual = () => {
    return (
      <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
        {/* Animated Sound Waves */}
        
        
        <motion.div
          className="absolute w-96 h-96 rounded-full border-2 border-blue-400/30"
          animate={{
            scale: [1, 5],
            opacity: [1, 0],
          }}
          transition={{
            duration: 4,
            repeat: Infinity,
            ease: "easeOut",
          }}
        />
        <motion.div
          className="absolute w-80 h-80 rounded-full border-2 border-purple-400/30"
          animate={{
            scale: [1, 4],
            opacity: [0.8, 0],
          }}
          transition={{
            duration: 4,
            repeat: Infinity,
            ease: "easeOut",
            delay: 0.5,
          }}
        />
        <motion.div
          className="absolute w-64 h-64 rounded-full border-2 border-pink-400/30"
          animate={{
            scale: [1, 3],
            opacity: [0.8, 0],
          }}
          transition={{
            duration: 2,
            repeat: Infinity,
            ease: "easeOut",
            delay: 1,
          }}
        />
        <motion.div
          className="absolute w-64 h-64 rounded-full border-2 border-pink-400/30"
          animate={{
            scale: [1, 2],
            opacity: [0.8, 0],
          }}
          transition={{
            duration: 3,
            repeat: Infinity,
            ease: "easeOut",
            delay: 1.5,
          }}
        />
        <motion.div
          className="absolute w-64 h-64 rounded-full border-2 border-pink-400/30"
          animate={{
            scale: [1, 1],
            opacity: [0.8, 0],
          }}
          transition={{
            duration: 3,
            repeat: Infinity,
            ease: "easeOut",
            delay: 2,
          }}
        />

        {/* Floating Music Particles */}
        {[...Array(30)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-2 h-2 bg-purple-400 rounded-full"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
            }}
            animate={{
              y: [0, -40, 0],
              opacity: [0.8, 1, 0.8],
              scale: [1, 1.5, 1],
            }}
            transition={{
              duration: 2 + Math.random() * 2,
              repeat: Infinity,
              delay: Math.random() * 2,
            }}
          />
        ))}

        {/* Central Orb */}
        <motion.div
          className="w-48 h-48 rounded-full bg-gradient-to-br from-blue-500 to-purple-200 opacity-30 shadow-2xl"
          animate={{
            scale: [1, 1.05, 1],
            rotate: [0, 180, 360],
          }}
          transition={{
            duration: 8,
            repeat: Infinity,
            ease: "easeInOut",
          }}
        >
          <div className="absolute inset-0 backdrop-blur-xl rounded-full" />
          <div className="absolute inset-0 flex items-center justify-center">
            <Volume2 className="h-16 w-16 text-white animate-pulse" />
          </div>
        </motion.div>
      </div>
    );
  };

  return (
    <div className="dark:bg-gray-950">
      <section className="min-h-screen relative flex items-center justify-center bg-gradient-to-br from-blue-600/10 via-purple-600/10 to-pink-600/10 overflow-hidden">
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,_var(--tw-gradient-stops))] from-transparent via-blue-900/5 to-purple-900/5" />

        <HeroVisual />

        <div className="container mx-auto px-4 relative z-10">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center max-w-4xl mx-auto"
          >
            <motion.div initial={{ scale: 0 }} animate={{ scale: 1 }} className="inline-block mb-6">
              <div className="px-4 py-2 bg-blue-100 dark:bg-blue-900 rounded-full text-blue-900 dark:text-blue-500 text-sm font-medium mb-4 backdrop-blur-lg">
                🎉 50,000+ Audio Files Processed Daily
              </div>
            </motion.div>

            <h1 className="text-5xl md:text-7xl font-bold mb-8">
              <span className="bg-gradient-to-r from-blue-700 to-purple-900 bg-clip-text text-transparent">
                From Sound to Text
              </span>
              <br />
              <span className="text-3xl md:text-5xl font-medium text-gray-1000 dark:text-gray-300 mt-4 block">
                AI-Powered Speech Recognition at Lightspeed
              </span>
            </h1>

            <motion.div className="flex gap-4 justify-center mt-12" whileHover={{ scale: 1.05 }}>
              <Button
                asChild
                className="rounded-full px-8 py-6 text-lg bg-gradient-to-r from-blue-200 to-purple-500 hover:from-blue-300 hover:to-purple-600 shadow-xl"
              >
                <Link to="/signup">
                  <Zap className="mr-2 h-5 w-5" />
                  Start Free Trial - 90 mins Free
                </Link>
              </Button>
            </motion.div>
          </motion.div>
        </div>

        {/* Floating Scroll Indicator */}
        <motion.div
          className="absolute bottom-8 left-1/2 -translate-x-1/2"
          animate={{ y: [0, -15, 0] }}
          transition={{ duration: 2, repeat: Infinity }}
        >
          <ChevronDown className="h-8 w-8 text-white/80" />
        </motion.div>
      </section>


      {/* Use Cases Section */}
      <section className="py-20 bg-white dark:bg-gray-950">
        <div className="container mx-auto px-4">
          <div className="text-center mb-16">
            <motion.h2
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 1 }}
              className="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent"
            >
              Who Uses Audio Transcription?
            </motion.h2>
            <p className="text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
              Whether you're creating content, conducting research, or running a business - transform your audio
              workflow with precision transcription
            </p>
          </div>

          <div className="grid md:grid-cols-4 gap-8">
            {useCases.map((useCase, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                className="p-6 text-center group"
              >
                <div className="w-16 h-16 mb-4 flex items-center justify-center bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl text-white mx-auto transition-all group-hover:scale-110">
                  {useCase.icon}
                </div>
                <h3 className="text-2xl font-semibold mb-2">{useCase.title}</h3>
                <p className="text-gray-600 dark:text-gray-400">{useCase.text}</p>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

        {/* How It Works Section */}
        <section className="container mx-auto px-4">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              Transform Audio in 3 Simple Steps
            </h2>
          </div>
  
          <div className="grid md:grid-cols-3 gap-8 max-w-6xl mx-auto">
            <motion.div
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 1 }}
              className="p-8 bg-white/5 dark:bg-gray-800/50 backdrop-blur-lg rounded-2xl border border-gray-200/10"
            >
              <div className="text-5xl mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">1</div>
              <h3 className="text-2xl font-semibold mb-4">Upload Audio/Video</h3>
              <p className="text-gray-600 dark:text-gray-400">
                Drag & drop files or record directly. Supports MP3, WAV, MP4, and more
              </p>
            </motion.div>
  
            <motion.div className="relative flex items-center justify-center">
              <div className="absolute inset-0 bg-gradient-to-r from-blue-600/20 to-purple-600/20 blur-3xl" />
              <motion.div
                className="relative"
                animate={{
                  rotate: [0, 360],
                }}
                transition={{
                  duration: 8,
                  repeat: Infinity,
                  ease: "linear",
                }}
              >
                <div className="p-8 bg-white/5 dark:bg-gray-800/50 backdrop-blur-lg rounded-full border-2 border-purple-500/30">
                  <Mic className="h-24 w-24 text-purple-500" />
                </div>
              </motion.div>
            </motion.div>
  
            <motion.div
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 1 }}
              className="p-8 bg-white/5 dark:bg-gray-800/50 backdrop-blur-lg rounded-2xl border border-gray-200/10"
            >
              <div className="text-5xl mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">3</div>
              <h3 className="text-2xl font-semibold mb-4">Download & Share</h3>
              <p className="text-gray-600 dark:text-gray-400">
                Export in any format, share securely, or integrate with your tools
              </p>
            </motion.div>
          </div>
        </section>
  

      {/* Features Section */}
      <section className="py-20 bg-white dark:bg-gray-950">
        <div className="container mx-auto px-4">
          <div className="text-center mb-16">
            <motion.h2
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 1 }}
              className="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent"
            >
              Why Choose Us?
            </motion.h2>
            <p className="text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
              Revolutionize your workflow with AI-powered transcription that understands context, accents, and nuances
            </p>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {features.map((feature, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ delay: index * 0.1 }}
                className="group p-8 bg-gradient-to-b from-white to-gray-50 dark:from-gray-900 dark:to-gray-800 rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300"
              >
                <div className="w-16 h-16 mb-6 flex items-center justify-center bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl text-white">
                  {feature.icon}
                </div>
                <h3 className="text-2xl font-semibold mb-3">{feature.title}</h3>
                <p className="text-gray-600 dark:text-gray-400">{feature.description}</p>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Enhanced Pricing Section */}
      <section className="py-20 bg-white dark:bg-gray-950">
        <div className="container mx-auto px-4">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              Start Transcribing Today
            </h2>
            <p className="text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
              Get 90 minutes free transcription every month. No credit card required
            </p>
          </div>

          {status === "succeeded" && (
            <div className="flex flex-col lg:flex-row items-center justify-center gap-8">
              {plans.map((plan, index) => (
                <motion.div
                  key={plan._id}
                  initial={{ opacity: 0, y: 30 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  className={cn(
                    "relative w-full max-w-md p-8 bg-gradient-to-b from-white dark:from-gray-900 to-gray-50 dark:to-gray-800 rounded-2xl shadow-xl transition-all duration-300 hover:-translate-y-4",
                    index === 1 ? "scale-110 z-10 border-2 border-purple-500 shadow-2xl" : "border dark:border-gray-700"
                  )}
                >
                  {index === 1 && (
                    <div className="absolute top-0 right-0 bg-purple-500 text-white px-4 py-1 rounded-bl-xl rounded-tr-xl text-sm">
                      Best Value 🔥
                    </div>
                  )}

                  <div className="mb-8 text-center">
                    <h3 className="text-2xl font-bold mb-2">{plan.name}</h3>
                    <div className="text-4xl font-bold mb-4">
                      {plan.isPaid ? `$${plan.price}` : "Free"}
                      {plan.isPaid && <span className="text-lg text-gray-500">/{plan.currency}</span>}
                    </div>

                    <div className="p-4 bg-blue-50 dark:bg-gray-700 rounded-lg mb-6">
                      <div className="flex items-center justify-center gap-2">
                        <Zap className="h-5 w-5 text-blue-500" />
                        <span className="text-gray-600 dark:text-gray-300">{plan.totalLimit} mins/day included</span>
                      </div>
                    </div>
                  </div>

                  <ul className="space-y-4 mb-8">
                    <li className="flex items-start gap-3 text-gray-600 dark:text-gray-300">
                      <Check className="h-5 w-5 text-green-500 mt-1 flex-shrink-0" />
                      <div>
                        <div className="font-medium">Full Transcription</div>
                        <div className="text-sm">99% accuracy guarantee</div>
                      </div>
                    </li>
                    <li className="flex items-start gap-3 text-gray-600 dark:text-gray-300">
                      <Check className="h-5 w-5 text-green-500 mt-1 flex-shrink-0" />
                      <div>
                        <div className="font-medium">Export Formats</div>
                        <div className="text-sm">TXT, DOCX, SRT, VTT</div>
                      </div>
                    </li>
                    {plan.isPaid && (
                      <li className="flex items-start gap-3 text-gray-600 dark:text-gray-300">
                        <Check className="h-5 w-5 text-green-500 mt-1 flex-shrink-0" />
                        <div>
                          <div className="font-medium">Priority Processing</div>
                          <div className="text-sm">2x faster than free tier</div>
                        </div>
                      </li>
                    )}
                  </ul>

                  <Button className="w-full group" variant={index === 1 ? "default" : "outline"} size="lg">
                    {plan.isPaid ? "Start Professional Trial" : "Get Free Account"}
                  </Button>
                </motion.div>
              ))}
            </div>
          )}

          <div className="text-center mt-12 text-gray-600 dark:text-gray-400">
            Need custom solutions?{" "}
            <Link to="/enterprise" className="text-purple-600 hover:underline">
              Explore Enterprise Plans →
            </Link>
          </div>
        </div>
      </section>

      {/* Testimonials Carousel */}
      <section className="py-20 bg-white dark:bg-gray-950">
        <div className="container mx-auto px-4">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              Loved by Teams Worldwide
            </h2>
          </div>

          <Carousel
            opts={{
              align: "start",
              loop: true,
            }}
            className="w-full"
          >
            <CarouselContent>
              {feedback.map((fb, index) => (
                <CarouselItem key={index} className="md:basis-1/2 lg:basis-1/3">
                  <motion.div
                    initial={{ opacity: 0 }}
                    whileInView={{ opacity: 1 }}
                    className="p-6 bg-gray-50 dark:bg-gray-900 rounded-2xl h-full"
                  >
                    <div className="flex items-center gap-2 mb-4">
                      {[...Array(5)].map((_, i) => (
                        <Star
                          key={i}
                          className={`h-5 w-5 ${i < fb.rating ? "text-yellow-400 fill-yellow-400" : "text-gray-300"}`}
                        />
                      ))}
                    </div>
                    <p className="text-gray-600 dark:text-gray-300 mb-6 italic">"{fb.review}"</p>
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-white">
                        {fb.userName || "A"}
                      </div>
                      <div>
                        <div className="font-semibold">{fb.userName || "Anonymous"}</div>
                        <div className="text-sm text-gray-500">Verified User</div>
                      </div>
                    </div>
                  </motion.div>
                </CarouselItem>
              ))}
            </CarouselContent>
          </Carousel>
        </div>
      </section>

      {/* Stats Section */}
      <section className="py-20 bg-gradient-to-r from-blue-600 to-purple-600 text-white">
        <div className="container mx-auto px-4">
          <div className="grid md:grid-cols-3 gap-8 text-center">
            <motion.div initial={{ opacity: 0 }} whileInView={{ opacity: 1 }} className="p-6">
              <div className="text-5xl font-bold mb-2">50K+</div>
              <div className="text-gray-200">Happy Customers</div>
            </motion.div>
            <motion.div initial={{ opacity: 0 }} whileInView={{ opacity: 1 }} className="p-6">
              <div className="text-5xl font-bold mb-2">99%</div>
              <div className="text-gray-200">Accuracy Rate</div>
            </motion.div>
            <motion.div initial={{ opacity: 0 }} whileInView={{ opacity: 1 }} className="p-6">
              <div className="text-5xl font-bold mb-2">1M+</div>
              <div className="text-gray-200">Minutes Transcribed</div>
            </motion.div>
          </div>
        </div>
      </section>
    </div>
  );
}


# ======================
# File: src/routes/ProtectedRoute.tsx
# ======================

import React from 'react';
import { useAppSelector } from '@/store/hooks';
import { Navigate, useLocation } from 'react-router-dom';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

export default function ProtectedRoute({ children }: ProtectedRouteProps) {
  const auth = useAppSelector((state) => state.auth);
  const location = useLocation();

  if (!auth.user) {
    return <Navigate to="/auth" state={{ from: location }} replace />;
  }
  return <>{children}</>;
}


# ======================
# File: src/routes/RoleRoute.tsx
# ======================

import React from 'react';
import { useAppSelector } from '@/store/hooks';
import { Navigate, useLocation } from 'react-router-dom';

interface RoleRouteProps {
  children: React.ReactNode;
  requiredRole?: string;  // e.g. "admin"
  requirePaidPlan?: boolean;
}

export default function RoleRoute({ children, requiredRole, requirePaidPlan }: RoleRouteProps) {
  const auth = useAppSelector((state) => state.auth);
  const location = useLocation();

  // must be logged in
  if (!auth.user) {
    return <Navigate to="/auth" state={{ from: location }} replace />;
  }

  // if we require a specific role
  if (requiredRole && auth.user.role !== requiredRole) {
    return <Navigate to="/not-authorized" replace />;
  }

  // if we require a paid plan
  if (requirePaidPlan && auth.user.subscriptionPlan !== 'paid') {
    return <Navigate to="/upgrade" replace />;
  }

  return <>{children}</>;
}


# ======================
# File: src/store/hooks.ts
# ======================

// src/store/hooks.ts
import { useDispatch, useSelector } from 'react-redux'
import type { TypedUseSelectorHook } from 'react-redux'
import type { RootState, AppDispatch } from './store'

export const useAppDispatch: () => AppDispatch = useDispatch
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector


# ======================
# File: src/store/store.ts
# ======================

// src/store/store.ts
import { configureStore } from '@reduxjs/toolkit';
import authReducer from '@/features/auth/authSlice';
import publicReducer from '@/features/public/publicSlice';
import transcriptionReducer from '@/features/transcription/transcriptionSlice';

export const store = configureStore({
  reducer: {
    auth: authReducer,
    public: publicReducer,
    transcription: transcriptionReducer,
  },
  devTools: process.env.NODE_ENV !== 'production',
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
